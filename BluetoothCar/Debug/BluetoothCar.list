
BluetoothCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004510  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a8  0800461c  0800461c  0001461c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c4  080057c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080057c4  080057c4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057c4  080057c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080057cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000010  080057dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080057dc  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e897  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203b  00000000  00000000  0002e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  000318b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b82  00000000  00000000  000327c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e3d  00000000  00000000  00034342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf3c  00000000  00000000  0004517f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d10bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042cc  00000000  00000000  000d110c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004604 	.word	0x08004604

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004604 	.word	0x08004604

0800014c <SpeedController>:
uint8_t leftDirction = 1;
uint8_t rightDirction = 1;


void SpeedController()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(leftDirction == 0){
 8000150:	4b35      	ldr	r3, [pc, #212]	; (8000228 <SpeedController+0xdc>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d10c      	bne.n	8000172 <SpeedController+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000158:	2201      	movs	r2, #1
 800015a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800015e:	4833      	ldr	r0, [pc, #204]	; (800022c <SpeedController+0xe0>)
 8000160:	f001 fcb6 	bl	8001ad0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000164:	2200      	movs	r2, #0
 8000166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016a:	4830      	ldr	r0, [pc, #192]	; (800022c <SpeedController+0xe0>)
 800016c:	f001 fcb0 	bl	8001ad0 <HAL_GPIO_WritePin>
 8000170:	e01c      	b.n	80001ac <SpeedController+0x60>
	}
	else if(leftDirction == 1){
 8000172:	4b2d      	ldr	r3, [pc, #180]	; (8000228 <SpeedController+0xdc>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d10c      	bne.n	8000194 <SpeedController+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000180:	482a      	ldr	r0, [pc, #168]	; (800022c <SpeedController+0xe0>)
 8000182:	f001 fca5 	bl	8001ad0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000186:	2201      	movs	r2, #1
 8000188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018c:	4827      	ldr	r0, [pc, #156]	; (800022c <SpeedController+0xe0>)
 800018e:	f001 fc9f 	bl	8001ad0 <HAL_GPIO_WritePin>
 8000192:	e00b      	b.n	80001ac <SpeedController+0x60>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019a:	4824      	ldr	r0, [pc, #144]	; (800022c <SpeedController+0xe0>)
 800019c:	f001 fc98 	bl	8001ad0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a6:	4821      	ldr	r0, [pc, #132]	; (800022c <SpeedController+0xe0>)
 80001a8:	f001 fc92 	bl	8001ad0 <HAL_GPIO_WritePin>
	}
	if(rightDirction == 0){
 80001ac:	4b20      	ldr	r3, [pc, #128]	; (8000230 <SpeedController+0xe4>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d10c      	bne.n	80001ce <SpeedController+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ba:	481e      	ldr	r0, [pc, #120]	; (8000234 <SpeedController+0xe8>)
 80001bc:	f001 fc88 	bl	8001ad0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80001c0:	2201      	movs	r2, #1
 80001c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001c6:	481b      	ldr	r0, [pc, #108]	; (8000234 <SpeedController+0xe8>)
 80001c8:	f001 fc82 	bl	8001ad0 <HAL_GPIO_WritePin>
 80001cc:	e01c      	b.n	8000208 <SpeedController+0xbc>
	}
	else if(rightDirction == 1){
 80001ce:	4b18      	ldr	r3, [pc, #96]	; (8000230 <SpeedController+0xe4>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	d10c      	bne.n	80001f0 <SpeedController+0xa4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80001d6:	2201      	movs	r2, #1
 80001d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001dc:	4815      	ldr	r0, [pc, #84]	; (8000234 <SpeedController+0xe8>)
 80001de:	f001 fc77 	bl	8001ad0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e8:	4812      	ldr	r0, [pc, #72]	; (8000234 <SpeedController+0xe8>)
 80001ea:	f001 fc71 	bl	8001ad0 <HAL_GPIO_WritePin>
 80001ee:	e00b      	b.n	8000208 <SpeedController+0xbc>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f6:	480f      	ldr	r0, [pc, #60]	; (8000234 <SpeedController+0xe8>)
 80001f8:	f001 fc6a 	bl	8001ad0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000202:	480c      	ldr	r0, [pc, #48]	; (8000234 <SpeedController+0xe8>)
 8000204:	f001 fc64 	bl	8001ad0 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, leftSpeed);
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SpeedController+0xec>)
 800020a:	781a      	ldrb	r2, [r3, #0]
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <SpeedController+0xf0>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, rightSpeed);
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <SpeedController+0xf4>)
 8000214:	781a      	ldrb	r2, [r3, #0]
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <SpeedController+0xf8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f001 f8f1 	bl	8001404 <HAL_Delay>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000000 	.word	0x20000000
 800022c:	40010800 	.word	0x40010800
 8000230:	20000001 	.word	0x20000001
 8000234:	40010c00 	.word	0x40010c00
 8000238:	20000155 	.word	0x20000155
 800023c:	20000080 	.word	0x20000080
 8000240:	20000156 	.word	0x20000156
 8000244:	200000c8 	.word	0x200000c8

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f001 f877 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f8b1 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 fa63 	bl	8000720 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800025a:	f000 fa37 	bl	80006cc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800025e:	f000 f8f1 	bl	8000444 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000262:	f000 f9bd 	bl	80005e0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000266:	f000 f91b 	bl	80004a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 800026a:	f000 fc7f 	bl	8000b6c <SSD1306_Init>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800026e:	4b46      	ldr	r3, [pc, #280]	; (8000388 <main+0x140>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	68da      	ldr	r2, [r3, #12]
 8000274:	4b44      	ldr	r3, [pc, #272]	; (8000388 <main+0x140>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f042 0220 	orr.w	r2, r2, #32
 800027c:	60da      	str	r2, [r3, #12]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800027e:	2108      	movs	r1, #8
 8000280:	4842      	ldr	r0, [pc, #264]	; (800038c <main+0x144>)
 8000282:	f002 fe79 	bl	8002f78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000286:	2100      	movs	r1, #0
 8000288:	4841      	ldr	r0, [pc, #260]	; (8000390 <main+0x148>)
 800028a:	f002 fe75 	bl	8002f78 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000294:	483f      	ldr	r0, [pc, #252]	; (8000394 <main+0x14c>)
 8000296:	f001 fc1b 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a0:	483c      	ldr	r0, [pc, #240]	; (8000394 <main+0x14c>)
 80002a2:	f001 fc15 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ac:	483a      	ldr	r0, [pc, #232]	; (8000398 <main+0x150>)
 80002ae:	f001 fc0f 	bl	8001ad0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b8:	4837      	ldr	r0, [pc, #220]	; (8000398 <main+0x150>)
 80002ba:	f001 fc09 	bl	8001ad0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SpeedController();
 80002be:	f7ff ff45 	bl	800014c <SpeedController>
    /* USER CODE END WHILE */
	  SSD1306_Clear();
 80002c2:	f000 fdbb 	bl	8000e3c <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo1,128,40,1);
 80002c6:	2301      	movs	r3, #1
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2328      	movs	r3, #40	; 0x28
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	4a32      	ldr	r2, [pc, #200]	; (800039c <main+0x154>)
 80002d2:	210f      	movs	r1, #15
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 fbe0 	bl	8000a9a <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80002da:	f000 fd0b 	bl	8000cf4 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 80002de:	f000 fdad 	bl	8000e3c <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo2,128,40,1);
 80002e2:	2301      	movs	r3, #1
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2328      	movs	r3, #40	; 0x28
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2380      	movs	r3, #128	; 0x80
 80002ec:	4a2c      	ldr	r2, [pc, #176]	; (80003a0 <main+0x158>)
 80002ee:	210f      	movs	r1, #15
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 fbd2 	bl	8000a9a <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80002f6:	f000 fcfd 	bl	8000cf4 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 80002fa:	f000 fd9f 	bl	8000e3c <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo3,128,40,1);
 80002fe:	2301      	movs	r3, #1
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	2328      	movs	r3, #40	; 0x28
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <main+0x15c>)
 800030a:	210f      	movs	r1, #15
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fbc4 	bl	8000a9a <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000312:	f000 fcef 	bl	8000cf4 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8000316:	f000 fd91 	bl	8000e3c <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo4,128,40,1);
 800031a:	2301      	movs	r3, #1
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2328      	movs	r3, #40	; 0x28
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2380      	movs	r3, #128	; 0x80
 8000324:	4a20      	ldr	r2, [pc, #128]	; (80003a8 <main+0x160>)
 8000326:	210f      	movs	r1, #15
 8000328:	2000      	movs	r0, #0
 800032a:	f000 fbb6 	bl	8000a9a <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800032e:	f000 fce1 	bl	8000cf4 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8000332:	f000 fd83 	bl	8000e3c <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo5,128,40,1);
 8000336:	2301      	movs	r3, #1
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2328      	movs	r3, #40	; 0x28
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2380      	movs	r3, #128	; 0x80
 8000340:	4a1a      	ldr	r2, [pc, #104]	; (80003ac <main+0x164>)
 8000342:	210f      	movs	r1, #15
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fba8 	bl	8000a9a <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800034a:	f000 fcd3 	bl	8000cf4 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 800034e:	f000 fd75 	bl	8000e3c <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo6,128,40,1);
 8000352:	2301      	movs	r3, #1
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	2328      	movs	r3, #40	; 0x28
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <main+0x168>)
 800035e:	210f      	movs	r1, #15
 8000360:	2000      	movs	r0, #0
 8000362:	f000 fb9a 	bl	8000a9a <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000366:	f000 fcc5 	bl	8000cf4 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 800036a:	f000 fd67 	bl	8000e3c <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo7,128,40,1);
 800036e:	2301      	movs	r3, #1
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2328      	movs	r3, #40	; 0x28
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <main+0x16c>)
 800037a:	210f      	movs	r1, #15
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fb8c 	bl	8000a9a <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000382:	f000 fcb7 	bl	8000cf4 <SSD1306_UpdateScreen>
	  SpeedController();
 8000386:	e79a      	b.n	80002be <main+0x76>
 8000388:	20000110 	.word	0x20000110
 800038c:	20000080 	.word	0x20000080
 8000390:	200000c8 	.word	0x200000c8
 8000394:	40010800 	.word	0x40010800
 8000398:	40010c00 	.word	0x40010c00
 800039c:	0800462c 	.word	0x0800462c
 80003a0:	080048ac 	.word	0x080048ac
 80003a4:	08004b2c 	.word	0x08004b2c
 80003a8:	08004dac 	.word	0x08004dac
 80003ac:	0800502c 	.word	0x0800502c
 80003b0:	080052ac 	.word	0x080052ac
 80003b4:	0800552c 	.word	0x0800552c

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	; 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 f914 	bl	80045f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003da:	2301      	movs	r3, #1
 80003dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	2301      	movs	r3, #1
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ec:	2302      	movs	r3, #2
 80003ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fc:	f107 0318 	add.w	r3, r7, #24
 8000400:	4618      	mov	r0, r3
 8000402:	f002 f8f5 	bl	80025f0 <HAL_RCC_OscConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800040c:	f000 fb40 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000410:	230f      	movs	r3, #15
 8000412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000414:	2302      	movs	r3, #2
 8000416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2102      	movs	r1, #2
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fb62 	bl	8002af4 <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000436:	f000 fb2b 	bl	8000a90 <Error_Handler>
  }
}
 800043a:	bf00      	nop
 800043c:	3740      	adds	r7, #64	; 0x40
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 fb3d 	bl	8001b00 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800048c:	f000 fb00 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000002c 	.word	0x2000002c
 8000498:	40005400 	.word	0x40005400
 800049c:	00061a80 	.word	0x00061a80

080004a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b096      	sub	sp, #88	; 0x58
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2220      	movs	r2, #32
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f004 f88b 	bl	80045f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004de:	4b3e      	ldr	r3, [pc, #248]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004e0:	4a3e      	ldr	r2, [pc, #248]	; (80005dc <MX_TIM1_Init+0x13c>)
 80004e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80004e4:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004e6:	2247      	movs	r2, #71	; 0x47
 80004e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ea:	4b3b      	ldr	r3, [pc, #236]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80004f0:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004f2:	2264      	movs	r2, #100	; 0x64
 80004f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f6:	4b38      	ldr	r3, [pc, #224]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fc:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000508:	4833      	ldr	r0, [pc, #204]	; (80005d8 <MX_TIM1_Init+0x138>)
 800050a:	f002 fc8d 	bl	8002e28 <HAL_TIM_Base_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000514:	f000 fabc 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800051e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000522:	4619      	mov	r1, r3
 8000524:	482c      	ldr	r0, [pc, #176]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000526:	f002 ff8f 	bl	8003448 <HAL_TIM_ConfigClockSource>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000530:	f000 faae 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000534:	4828      	ldr	r0, [pc, #160]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000536:	f002 fcc6 	bl	8002ec6 <HAL_TIM_PWM_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000540:	f000 faa6 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000544:	2300      	movs	r3, #0
 8000546:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800054c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000550:	4619      	mov	r1, r3
 8000552:	4821      	ldr	r0, [pc, #132]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000554:	f003 fb0e 	bl	8003b74 <HAL_TIMEx_MasterConfigSynchronization>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800055e:	f000 fa97 	bl	8000a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000562:	2360      	movs	r3, #96	; 0x60
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800056a:	2300      	movs	r3, #0
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800056e:	2300      	movs	r3, #0
 8000570:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000572:	2304      	movs	r3, #4
 8000574:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800057a:	2300      	movs	r3, #0
 800057c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800057e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000582:	2208      	movs	r2, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000588:	f002 fea0 	bl	80032cc <HAL_TIM_PWM_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000592:	f000 fa7d 	bl	8000a90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <MX_TIM1_Init+0x138>)
 80005ba:	f003 fb39 	bl	8003c30 <HAL_TIMEx_ConfigBreakDeadTime>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80005c4:	f000 fa64 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <MX_TIM1_Init+0x138>)
 80005ca:	f000 fd95 	bl	80010f8 <HAL_TIM_MspPostInit>

}
 80005ce:	bf00      	nop
 80005d0:	3758      	adds	r7, #88	; 0x58
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000080 	.word	0x20000080
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	; 0x38
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000612:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <MX_TIM3_Init+0xe8>)
 8000614:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000618:	2247      	movs	r2, #71	; 0x47
 800061a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <MX_TIM3_Init+0xe4>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000624:	2264      	movs	r2, #100	; 0x64
 8000626:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_TIM3_Init+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062e:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000634:	4823      	ldr	r0, [pc, #140]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000636:	f002 fbf7 	bl	8002e28 <HAL_TIM_Base_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000640:	f000 fa26 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800064a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064e:	4619      	mov	r1, r3
 8000650:	481c      	ldr	r0, [pc, #112]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000652:	f002 fef9 	bl	8003448 <HAL_TIM_ConfigClockSource>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800065c:	f000 fa18 	bl	8000a90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000660:	4818      	ldr	r0, [pc, #96]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000662:	f002 fc30 	bl	8002ec6 <HAL_TIM_PWM_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 fa10 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4619      	mov	r1, r3
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000680:	f003 fa78 	bl	8003b74 <HAL_TIMEx_MasterConfigSynchronization>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800068a:	f000 fa01 	bl	8000a90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068e:	2360      	movs	r3, #96	; 0x60
 8000690:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800069a:	2304      	movs	r3, #4
 800069c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	4807      	ldr	r0, [pc, #28]	; (80006c4 <MX_TIM3_Init+0xe4>)
 80006a6:	f002 fe11 	bl	80032cc <HAL_TIM_PWM_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80006b0:	f000 f9ee 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <MX_TIM3_Init+0xe4>)
 80006b6:	f000 fd1f 	bl	80010f8 <HAL_TIM_MspPostInit>

}
 80006ba:	bf00      	nop
 80006bc:	3738      	adds	r7, #56	; 0x38
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000c8 	.word	0x200000c8
 80006c8:	40000400 	.word	0x40000400

080006cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART1_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 8000704:	f003 faf7 	bl	8003cf6 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f9bf 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000110 	.word	0x20000110
 800071c:	40013800 	.word	0x40013800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a27      	ldr	r2, [pc, #156]	; (80007d8 <MX_GPIO_Init+0xb8>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0320 	and.w	r3, r3, #32
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_GPIO_Init+0xb8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_GPIO_Init+0xb8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <MX_GPIO_Init+0xb8>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000782:	4816      	ldr	r0, [pc, #88]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000784:	f001 f9a4 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800078e:	4814      	ldr	r0, [pc, #80]	; (80007e0 <MX_GPIO_Init+0xc0>)
 8000790:	f001 f99e 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000794:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0xbc>)
 80007ae:	f001 f80b 	bl	80017c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_GPIO_Init+0xc0>)
 80007cc:	f000 fffc 	bl	80017c8 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	40010800 	.word	0x40010800

080007e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	switch(r){
 80007ec:	4ba3      	ldr	r3, [pc, #652]	; (8000a7c <HAL_UART_RxCpltCallback+0x298>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	3b41      	subs	r3, #65	; 0x41
 80007f2:	2b13      	cmp	r3, #19
 80007f4:	f200 8130 	bhi.w	8000a58 <HAL_UART_RxCpltCallback+0x274>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <HAL_UART_RxCpltCallback+0x1c>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000851 	.word	0x08000851
 8000804:	0800086b 	.word	0x0800086b
 8000808:	08000885 	.word	0x08000885
 800080c:	0800089f 	.word	0x0800089f
 8000810:	080008b9 	.word	0x080008b9
 8000814:	080008d3 	.word	0x080008d3
 8000818:	080008ed 	.word	0x080008ed
 800081c:	08000907 	.word	0x08000907
 8000820:	08000921 	.word	0x08000921
 8000824:	0800093b 	.word	0x0800093b
 8000828:	08000955 	.word	0x08000955
 800082c:	0800096f 	.word	0x0800096f
 8000830:	08000989 	.word	0x08000989
 8000834:	080009a3 	.word	0x080009a3
 8000838:	080009bd 	.word	0x080009bd
 800083c:	080009d7 	.word	0x080009d7
 8000840:	080009f1 	.word	0x080009f1
 8000844:	08000a0b 	.word	0x08000a0b
 8000848:	08000a25 	.word	0x08000a25
 800084c:	08000a3f 	.word	0x08000a3f
		case 'A': {	//3前进
			leftSpeed = fast;
 8000850:	4b8b      	ldr	r3, [pc, #556]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000852:	226e      	movs	r2, #110	; 0x6e
 8000854:	701a      	strb	r2, [r3, #0]
			rightSpeed = fast;
 8000856:	4b8b      	ldr	r3, [pc, #556]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000858:	226e      	movs	r2, #110	; 0x6e
 800085a:	701a      	strb	r2, [r3, #0]
			leftDirction = 1;
 800085c:	4b8a      	ldr	r3, [pc, #552]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000862:	4b8a      	ldr	r3, [pc, #552]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
			break;
 8000868:	e103      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'B': {	//2前进
			leftSpeed = medium;
 800086a:	4b85      	ldr	r3, [pc, #532]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 800086c:	2258      	movs	r2, #88	; 0x58
 800086e:	701a      	strb	r2, [r3, #0]
			rightSpeed = medium;
 8000870:	4b84      	ldr	r3, [pc, #528]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000872:	2258      	movs	r2, #88	; 0x58
 8000874:	701a      	strb	r2, [r3, #0]
			leftDirction = 1;
 8000876:	4b84      	ldr	r3, [pc, #528]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 800087c:	4b83      	ldr	r3, [pc, #524]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
			break;
 8000882:	e0f6      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'C': {	//1前进
			leftSpeed = slow;
 8000884:	4b7e      	ldr	r3, [pc, #504]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000886:	2253      	movs	r2, #83	; 0x53
 8000888:	701a      	strb	r2, [r3, #0]
			rightSpeed = slow;
 800088a:	4b7e      	ldr	r3, [pc, #504]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 800088c:	2253      	movs	r2, #83	; 0x53
 800088e:	701a      	strb	r2, [r3, #0]
			leftDirction = 1;
 8000890:	4b7d      	ldr	r3, [pc, #500]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000896:	4b7d      	ldr	r3, [pc, #500]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
			break;
 800089c:	e0e9      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'D': {	//3后退
			leftSpeed = fast;
 800089e:	4b78      	ldr	r3, [pc, #480]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 80008a0:	226e      	movs	r2, #110	; 0x6e
 80008a2:	701a      	strb	r2, [r3, #0]
			rightSpeed = fast;
 80008a4:	4b77      	ldr	r3, [pc, #476]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 80008a6:	226e      	movs	r2, #110	; 0x6e
 80008a8:	701a      	strb	r2, [r3, #0]
			leftDirction = 0;
 80008aa:	4b77      	ldr	r3, [pc, #476]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 80008b0:	4b76      	ldr	r3, [pc, #472]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
			break;
 80008b6:	e0dc      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'E': {	//2后退
			leftSpeed = medium;
 80008b8:	4b71      	ldr	r3, [pc, #452]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 80008ba:	2258      	movs	r2, #88	; 0x58
 80008bc:	701a      	strb	r2, [r3, #0]
			rightSpeed = medium;
 80008be:	4b71      	ldr	r3, [pc, #452]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 80008c0:	2258      	movs	r2, #88	; 0x58
 80008c2:	701a      	strb	r2, [r3, #0]
			leftDirction = 0;
 80008c4:	4b70      	ldr	r3, [pc, #448]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 80008ca:	4b70      	ldr	r3, [pc, #448]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
			break;
 80008d0:	e0cf      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'F': {	//1后退
			leftSpeed = slow;
 80008d2:	4b6b      	ldr	r3, [pc, #428]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 80008d4:	2253      	movs	r2, #83	; 0x53
 80008d6:	701a      	strb	r2, [r3, #0]
			rightSpeed = slow;
 80008d8:	4b6a      	ldr	r3, [pc, #424]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 80008da:	2253      	movs	r2, #83	; 0x53
 80008dc:	701a      	strb	r2, [r3, #0]
			leftDirction = 0;
 80008de:	4b6a      	ldr	r3, [pc, #424]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 80008e4:	4b69      	ldr	r3, [pc, #420]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
			break;
 80008ea:	e0c2      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'G': {	//3左前
			leftSpeed = medium;
 80008ec:	4b64      	ldr	r3, [pc, #400]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 80008ee:	2258      	movs	r2, #88	; 0x58
 80008f0:	701a      	strb	r2, [r3, #0]
			rightSpeed = fast;
 80008f2:	4b64      	ldr	r3, [pc, #400]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 80008f4:	226e      	movs	r2, #110	; 0x6e
 80008f6:	701a      	strb	r2, [r3, #0]
			leftDirction = 1;
 80008f8:	4b63      	ldr	r3, [pc, #396]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 80008fe:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
			break;
 8000904:	e0b5      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
			}
		case 'H': {	//2左前
			leftSpeed = slow;
 8000906:	4b5e      	ldr	r3, [pc, #376]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000908:	2253      	movs	r2, #83	; 0x53
 800090a:	701a      	strb	r2, [r3, #0]
			rightSpeed = medium;
 800090c:	4b5d      	ldr	r3, [pc, #372]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 800090e:	2258      	movs	r2, #88	; 0x58
 8000910:	701a      	strb	r2, [r3, #0]
			leftDirction = 1;
 8000912:	4b5d      	ldr	r3, [pc, #372]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000918:	4b5c      	ldr	r3, [pc, #368]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
			break;
 800091e:	e0a8      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'I': {	//1左前
			leftSpeed = stop;
 8000920:	4b57      	ldr	r3, [pc, #348]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
			rightSpeed = slow;
 8000926:	4b57      	ldr	r3, [pc, #348]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000928:	2253      	movs	r2, #83	; 0x53
 800092a:	701a      	strb	r2, [r3, #0]
			leftDirction = 3;
 800092c:	4b56      	ldr	r3, [pc, #344]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 800092e:	2203      	movs	r2, #3
 8000930:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000932:	4b56      	ldr	r3, [pc, #344]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
			break;
 8000938:	e09b      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'J': {	//3左后
			leftSpeed = medium;
 800093a:	4b51      	ldr	r3, [pc, #324]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 800093c:	2258      	movs	r2, #88	; 0x58
 800093e:	701a      	strb	r2, [r3, #0]
			rightSpeed = fast;
 8000940:	4b50      	ldr	r3, [pc, #320]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000942:	226e      	movs	r2, #110	; 0x6e
 8000944:	701a      	strb	r2, [r3, #0]
			leftDirction = 0;
 8000946:	4b50      	ldr	r3, [pc, #320]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 800094c:	4b4f      	ldr	r3, [pc, #316]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
			break;
 8000952:	e08e      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'K': {	//2左后
			leftSpeed = slow;
 8000954:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000956:	2253      	movs	r2, #83	; 0x53
 8000958:	701a      	strb	r2, [r3, #0]
			rightSpeed = medium;
 800095a:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 800095c:	2258      	movs	r2, #88	; 0x58
 800095e:	701a      	strb	r2, [r3, #0]
			leftDirction = 0;
 8000960:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 8000966:	4b49      	ldr	r3, [pc, #292]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
			break;
 800096c:	e081      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'L': {	//1左后
			leftSpeed = stop;
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
			rightSpeed = slow;
 8000974:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000976:	2253      	movs	r2, #83	; 0x53
 8000978:	701a      	strb	r2, [r3, #0]
			leftDirction = 3;
 800097a:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 800097c:	2203      	movs	r2, #3
 800097e:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 8000980:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
			break;
 8000986:	e074      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'M': {	//3右前
			leftSpeed = fast;
 8000988:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 800098a:	226e      	movs	r2, #110	; 0x6e
 800098c:	701a      	strb	r2, [r3, #0]
			rightSpeed = medium;
 800098e:	4b3d      	ldr	r3, [pc, #244]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000990:	2258      	movs	r2, #88	; 0x58
 8000992:	701a      	strb	r2, [r3, #0]
			leftDirction = 1;
 8000994:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 800099a:	4b3c      	ldr	r3, [pc, #240]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
			break;
 80009a0:	e067      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'N': {	//2右前
			leftSpeed = medium;
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 80009a4:	2258      	movs	r2, #88	; 0x58
 80009a6:	701a      	strb	r2, [r3, #0]
			rightSpeed = slow;
 80009a8:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 80009aa:	2253      	movs	r2, #83	; 0x53
 80009ac:	701a      	strb	r2, [r3, #0]
			leftDirction = 1;
 80009ae:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 80009b4:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
			break;
 80009ba:	e05a      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'O': {	//1右前
			leftSpeed = slow;
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 80009be:	2253      	movs	r2, #83	; 0x53
 80009c0:	701a      	strb	r2, [r3, #0]
			rightSpeed = stop;
 80009c2:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
			leftDirction = 1;
 80009c8:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
			rightDirction = 3;
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	701a      	strb	r2, [r3, #0]
			break;
 80009d4:	e04d      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'P': {	//3右后
			leftSpeed = fast;
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 80009d8:	226e      	movs	r2, #110	; 0x6e
 80009da:	701a      	strb	r2, [r3, #0]
			rightSpeed = medium;
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 80009de:	2258      	movs	r2, #88	; 0x58
 80009e0:	701a      	strb	r2, [r3, #0]
			leftDirction = 0;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
			break;
 80009ee:	e040      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'Q': {	//2右后
			leftSpeed = medium;
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 80009f2:	2258      	movs	r2, #88	; 0x58
 80009f4:	701a      	strb	r2, [r3, #0]
			rightSpeed = slow;
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 80009f8:	2253      	movs	r2, #83	; 0x53
 80009fa:	701a      	strb	r2, [r3, #0]
			leftDirction = 0;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
			break;
 8000a08:	e033      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'R': {	//1右后
			leftSpeed = slow;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000a0c:	2253      	movs	r2, #83	; 0x53
 8000a0e:	701a      	strb	r2, [r3, #0]
			rightSpeed = stop;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
			leftDirction = 0;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
			rightDirction = 3;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000a1e:	2203      	movs	r2, #3
 8000a20:	701a      	strb	r2, [r3, #0]
			break;
 8000a22:	e026      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'S': {	//逆时针原地旋转
			leftSpeed = slow;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000a26:	2253      	movs	r2, #83	; 0x53
 8000a28:	701a      	strb	r2, [r3, #0]
			rightSpeed = slow;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000a2c:	2253      	movs	r2, #83	; 0x53
 8000a2e:	701a      	strb	r2, [r3, #0]
			leftDirction = 0;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
			break;
 8000a3c:	e019      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		case 'T': {	//顺时针原地旋转
			leftSpeed = slow;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000a40:	2253      	movs	r2, #83	; 0x53
 8000a42:	701a      	strb	r2, [r3, #0]
			rightSpeed = slow;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000a46:	2253      	movs	r2, #83	; 0x53
 8000a48:	701a      	strb	r2, [r3, #0]
			leftDirction = 1;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
			break;
 8000a56:	e00c      	b.n	8000a72 <HAL_UART_RxCpltCallback+0x28e>
		}
		default : {	//停下
			leftSpeed = stop;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_UART_RxCpltCallback+0x29c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
			rightSpeed = stop;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_UART_RxCpltCallback+0x2a0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
			leftDirction = 3;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_UART_RxCpltCallback+0x2a4>)
 8000a66:	2203      	movs	r2, #3
 8000a68:	701a      	strb	r2, [r3, #0]
			rightDirction = 3;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_UART_RxCpltCallback+0x2a8>)
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000154 	.word	0x20000154
 8000a80:	20000155 	.word	0x20000155
 8000a84:	20000156 	.word	0x20000156
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000001 	.word	0x20000001

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>

08000a9a <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	81fb      	strh	r3, [r7, #14]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	81bb      	strh	r3, [r7, #12]
 8000aac:	4613      	mov	r3, r2
 8000aae:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab4:	3307      	adds	r3, #7
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da00      	bge.n	8000abc <SSD1306_DrawBitmap+0x22>
 8000aba:	3307      	adds	r3, #7
 8000abc:	10db      	asrs	r3, r3, #3
 8000abe:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	82bb      	strh	r3, [r7, #20]
 8000ac8:	e044      	b.n	8000b54 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	827b      	strh	r3, [r7, #18]
 8000ace:	e02f      	b.n	8000b30 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000ad0:	8a7b      	ldrh	r3, [r7, #18]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	75fb      	strb	r3, [r7, #23]
 8000ae0:	e012      	b.n	8000b08 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000ae2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ae6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000aea:	fb03 f202 	mul.w	r2, r3, r2
 8000aee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	da00      	bge.n	8000af8 <SSD1306_DrawBitmap+0x5e>
 8000af6:	3307      	adds	r3, #7
 8000af8:	10db      	asrs	r3, r3, #3
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	4413      	add	r3, r2
 8000afe:	461a      	mov	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4413      	add	r3, r2
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da09      	bge.n	8000b24 <SSD1306_DrawBitmap+0x8a>
 8000b10:	89fa      	ldrh	r2, [r7, #14]
 8000b12:	8a7b      	ldrh	r3, [r7, #18]
 8000b14:	4413      	add	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	89b9      	ldrh	r1, [r7, #12]
 8000b1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f92e 	bl	8000d80 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000b24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	827b      	strh	r3, [r7, #18]
 8000b30:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbc9      	blt.n	8000ad0 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000b3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	3301      	adds	r3, #1
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	82bb      	strh	r3, [r7, #20]
 8000b48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	3301      	adds	r3, #1
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	81bb      	strh	r3, [r7, #12]
 8000b54:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbb4      	blt.n	8000aca <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b72:	f000 f96d 	bl	8000e50 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b76:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2178      	movs	r1, #120	; 0x78
 8000b7e:	485b      	ldr	r0, [pc, #364]	; (8000cec <SSD1306_Init+0x180>)
 8000b80:	f001 fa00 	bl	8001f84 <HAL_I2C_IsDeviceReady>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e0a9      	b.n	8000ce2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000b8e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b92:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b94:	e002      	b.n	8000b9c <SSD1306_Init+0x30>
		p--;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f9      	bne.n	8000b96 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000ba2:	22ae      	movs	r2, #174	; 0xae
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2078      	movs	r0, #120	; 0x78
 8000ba8:	f000 f9cc 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000bac:	2220      	movs	r2, #32
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2078      	movs	r0, #120	; 0x78
 8000bb2:	f000 f9c7 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bb6:	2210      	movs	r2, #16
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2078      	movs	r0, #120	; 0x78
 8000bbc:	f000 f9c2 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bc0:	22b0      	movs	r2, #176	; 0xb0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2078      	movs	r0, #120	; 0x78
 8000bc6:	f000 f9bd 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000bca:	22c8      	movs	r2, #200	; 0xc8
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2078      	movs	r0, #120	; 0x78
 8000bd0:	f000 f9b8 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2078      	movs	r0, #120	; 0x78
 8000bda:	f000 f9b3 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000bde:	2210      	movs	r2, #16
 8000be0:	2100      	movs	r1, #0
 8000be2:	2078      	movs	r0, #120	; 0x78
 8000be4:	f000 f9ae 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000be8:	2240      	movs	r2, #64	; 0x40
 8000bea:	2100      	movs	r1, #0
 8000bec:	2078      	movs	r0, #120	; 0x78
 8000bee:	f000 f9a9 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000bf2:	2281      	movs	r2, #129	; 0x81
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2078      	movs	r0, #120	; 0x78
 8000bf8:	f000 f9a4 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000bfc:	22ff      	movs	r2, #255	; 0xff
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2078      	movs	r0, #120	; 0x78
 8000c02:	f000 f99f 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c06:	22a1      	movs	r2, #161	; 0xa1
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2078      	movs	r0, #120	; 0x78
 8000c0c:	f000 f99a 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c10:	22a6      	movs	r2, #166	; 0xa6
 8000c12:	2100      	movs	r1, #0
 8000c14:	2078      	movs	r0, #120	; 0x78
 8000c16:	f000 f995 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c1a:	22a8      	movs	r2, #168	; 0xa8
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2078      	movs	r0, #120	; 0x78
 8000c20:	f000 f990 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c24:	223f      	movs	r2, #63	; 0x3f
 8000c26:	2100      	movs	r1, #0
 8000c28:	2078      	movs	r0, #120	; 0x78
 8000c2a:	f000 f98b 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c2e:	22a4      	movs	r2, #164	; 0xa4
 8000c30:	2100      	movs	r1, #0
 8000c32:	2078      	movs	r0, #120	; 0x78
 8000c34:	f000 f986 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c38:	22d3      	movs	r2, #211	; 0xd3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2078      	movs	r0, #120	; 0x78
 8000c3e:	f000 f981 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2078      	movs	r0, #120	; 0x78
 8000c48:	f000 f97c 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c4c:	22d5      	movs	r2, #213	; 0xd5
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2078      	movs	r0, #120	; 0x78
 8000c52:	f000 f977 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c56:	22f0      	movs	r2, #240	; 0xf0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2078      	movs	r0, #120	; 0x78
 8000c5c:	f000 f972 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c60:	22d9      	movs	r2, #217	; 0xd9
 8000c62:	2100      	movs	r1, #0
 8000c64:	2078      	movs	r0, #120	; 0x78
 8000c66:	f000 f96d 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c6a:	2222      	movs	r2, #34	; 0x22
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2078      	movs	r0, #120	; 0x78
 8000c70:	f000 f968 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c74:	22da      	movs	r2, #218	; 0xda
 8000c76:	2100      	movs	r1, #0
 8000c78:	2078      	movs	r0, #120	; 0x78
 8000c7a:	f000 f963 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c7e:	2212      	movs	r2, #18
 8000c80:	2100      	movs	r1, #0
 8000c82:	2078      	movs	r0, #120	; 0x78
 8000c84:	f000 f95e 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c88:	22db      	movs	r2, #219	; 0xdb
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2078      	movs	r0, #120	; 0x78
 8000c8e:	f000 f959 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c92:	2220      	movs	r2, #32
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	; 0x78
 8000c98:	f000 f954 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000c9c:	228d      	movs	r2, #141	; 0x8d
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2078      	movs	r0, #120	; 0x78
 8000ca2:	f000 f94f 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000ca6:	2214      	movs	r2, #20
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	; 0x78
 8000cac:	f000 f94a 	bl	8000f44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000cb0:	22af      	movs	r2, #175	; 0xaf
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2078      	movs	r0, #120	; 0x78
 8000cb6:	f000 f945 	bl	8000f44 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000cba:	222e      	movs	r2, #46	; 0x2e
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	; 0x78
 8000cc0:	f000 f940 	bl	8000f44 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 f843 	bl	8000d50 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000cca:	f000 f813 	bl	8000cf4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <SSD1306_Init+0x184>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SSD1306_Init+0x184>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SSD1306_Init+0x184>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000002c 	.word	0x2000002c
 8000cf0:	20000558 	.word	0x20000558

08000cf4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e01d      	b.n	8000d3c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	3b50      	subs	r3, #80	; 0x50
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2078      	movs	r0, #120	; 0x78
 8000d0c:	f000 f91a 	bl	8000f44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2078      	movs	r0, #120	; 0x78
 8000d16:	f000 f915 	bl	8000f44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d1a:	2210      	movs	r2, #16
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2078      	movs	r0, #120	; 0x78
 8000d20:	f000 f910 	bl	8000f44 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	01db      	lsls	r3, r3, #7
 8000d28:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <SSD1306_UpdateScreen+0x58>)
 8000d2a:	441a      	add	r2, r3
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	2140      	movs	r1, #64	; 0x40
 8000d30:	2078      	movs	r0, #120	; 0x78
 8000d32:	f000 f8a1 	bl	8000e78 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b07      	cmp	r3, #7
 8000d40:	d9de      	bls.n	8000d00 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d42:	bf00      	nop
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000158 	.word	0x20000158

08000d50 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <SSD1306_Fill+0x14>
 8000d60:	2300      	movs	r3, #0
 8000d62:	e000      	b.n	8000d66 <SSD1306_Fill+0x16>
 8000d64:	23ff      	movs	r3, #255	; 0xff
 8000d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4803      	ldr	r0, [pc, #12]	; (8000d7c <SSD1306_Fill+0x2c>)
 8000d6e:	f003 fc41 	bl	80045f4 <memset>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000158 	.word	0x20000158

08000d80 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	80bb      	strh	r3, [r7, #4]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	70fb      	strb	r3, [r7, #3]
	if (
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	2b7f      	cmp	r3, #127	; 0x7f
 8000d96:	d848      	bhi.n	8000e2a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d98:	88bb      	ldrh	r3, [r7, #4]
 8000d9a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d9c:	d845      	bhi.n	8000e2a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <SSD1306_DrawPixel+0xb4>)
 8000da0:	791b      	ldrb	r3, [r3, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d11a      	bne.n	8000df0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dba:	88fa      	ldrh	r2, [r7, #6]
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	08db      	lsrs	r3, r3, #3
 8000dc0:	b298      	uxth	r0, r3
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	01db      	lsls	r3, r3, #7
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <SSD1306_DrawPixel+0xb8>)
 8000dca:	5cd3      	ldrb	r3, [r2, r3]
 8000dcc:	b25a      	sxtb	r2, r3
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b259      	sxtb	r1, r3
 8000de0:	88fa      	ldrh	r2, [r7, #6]
 8000de2:	4603      	mov	r3, r0
 8000de4:	01db      	lsls	r3, r3, #7
 8000de6:	4413      	add	r3, r2
 8000de8:	b2c9      	uxtb	r1, r1
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <SSD1306_DrawPixel+0xb8>)
 8000dec:	54d1      	strb	r1, [r2, r3]
 8000dee:	e01d      	b.n	8000e2c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	08db      	lsrs	r3, r3, #3
 8000df6:	b298      	uxth	r0, r3
 8000df8:	4603      	mov	r3, r0
 8000dfa:	01db      	lsls	r3, r3, #7
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <SSD1306_DrawPixel+0xb8>)
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	b25a      	sxtb	r2, r3
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	4013      	ands	r3, r2
 8000e18:	b259      	sxtb	r1, r3
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	01db      	lsls	r3, r3, #7
 8000e20:	4413      	add	r3, r2
 8000e22:	b2c9      	uxtb	r1, r1
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <SSD1306_DrawPixel+0xb8>)
 8000e26:	54d1      	strb	r1, [r2, r3]
 8000e28:	e000      	b.n	8000e2c <SSD1306_DrawPixel+0xac>
		return;
 8000e2a:	bf00      	nop
	}
}
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	20000558 	.word	0x20000558
 8000e38:	20000158 	.word	0x20000158

08000e3c <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff ff85 	bl	8000d50 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000e46:	f7ff ff55 	bl	8000cf4 <SSD1306_UpdateScreen>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <ssd1306_I2C_Init+0x24>)
 8000e58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e5a:	e002      	b.n	8000e62 <ssd1306_I2C_Init+0x12>
		p--;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f9      	bne.n	8000e5c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	0003d090 	.word	0x0003d090

08000e78 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b0c7      	sub	sp, #284	; 0x11c
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000e86:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000e8a:	600a      	str	r2, [r1, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e92:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000e96:	4622      	mov	r2, r4
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e9e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eae:	460a      	mov	r2, r1
 8000eb0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000eb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000eba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ebe:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ecc:	e015      	b.n	8000efa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000ece:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ed2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ed6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	441a      	add	r2, r3
 8000ede:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	7811      	ldrb	r1, [r2, #0]
 8000ee6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000eea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000eee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000ef0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000efa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f04:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000f08:	8812      	ldrh	r2, [r2, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d8df      	bhi.n	8000ece <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f12:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b299      	uxth	r1, r3
 8000f1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	200a      	movs	r0, #10
 8000f2e:	9000      	str	r0, [sp, #0]
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <ssd1306_I2C_WriteMulti+0xc8>)
 8000f32:	f000 ff29 	bl	8001d88 <HAL_I2C_Master_Transmit>
}
 8000f36:	bf00      	nop
 8000f38:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd90      	pop	{r4, r7, pc}
 8000f40:	2000002c 	.word	0x2000002c

08000f44 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	71bb      	strb	r3, [r7, #6]
 8000f52:	4613      	mov	r3, r2
 8000f54:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f5a:	797b      	ldrb	r3, [r7, #5]
 8000f5c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	b299      	uxth	r1, r3
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	230a      	movs	r3, #10
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <ssd1306_I2C_Write+0x38>)
 8000f6e:	f000 ff0b 	bl	8001d88 <HAL_I2C_Master_Transmit>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000002c 	.word	0x2000002c

08000f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_MspInit+0x5c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_MspInit+0x5c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_MspInit+0x60>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_MspInit+0x60>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <HAL_I2C_MspInit+0x90>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d132      	bne.n	800106a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_I2C_MspInit+0x94>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_I2C_MspInit+0x94>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_I2C_MspInit+0x94>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001022:	2312      	movs	r3, #18
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4812      	ldr	r0, [pc, #72]	; (800107c <HAL_I2C_MspInit+0x98>)
 8001032:	f000 fbc9 	bl	80017c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_I2C_MspInit+0x9c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <HAL_I2C_MspInit+0x9c>)
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_I2C_MspInit+0x94>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_I2C_MspInit+0x94>)
 8001058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_I2C_MspInit+0x94>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40005400 	.word	0x40005400
 8001078:	40021000 	.word	0x40021000
 800107c:	40010c00 	.word	0x40010c00
 8001080:	40010000 	.word	0x40010000

08001084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a16      	ldr	r2, [pc, #88]	; (80010ec <HAL_TIM_Base_MspInit+0x68>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d10c      	bne.n	80010b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_TIM_Base_MspInit+0x6c>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <HAL_TIM_Base_MspInit+0x6c>)
 800109c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_TIM_Base_MspInit+0x6c>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ae:	e018      	b.n	80010e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_TIM_Base_MspInit+0x70>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d113      	bne.n	80010e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_TIM_Base_MspInit+0x6c>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_TIM_Base_MspInit+0x6c>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_TIM_Base_MspInit+0x6c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	201d      	movs	r0, #29
 80010d8:	f000 fa8f 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010dc:	201d      	movs	r0, #29
 80010de:	f000 faa8 	bl	8001632 <HAL_NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40012c00 	.word	0x40012c00
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40000400 	.word	0x40000400

080010f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <HAL_TIM_MspPostInit+0x98>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d119      	bne.n	800114c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_TIM_MspPostInit+0x9c>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_TIM_MspPostInit+0x9c>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_TIM_MspPostInit+0x9c>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001134:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2302      	movs	r3, #2
 800113c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4619      	mov	r1, r3
 8001144:	4814      	ldr	r0, [pc, #80]	; (8001198 <HAL_TIM_MspPostInit+0xa0>)
 8001146:	f000 fb3f 	bl	80017c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800114a:	e01c      	b.n	8001186 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a12      	ldr	r2, [pc, #72]	; (800119c <HAL_TIM_MspPostInit+0xa4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d117      	bne.n	8001186 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_TIM_MspPostInit+0x9c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_TIM_MspPostInit+0x9c>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_TIM_MspPostInit+0x9c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2302      	movs	r3, #2
 8001178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_TIM_MspPostInit+0xa0>)
 8001182:	f000 fb21 	bl	80017c8 <HAL_GPIO_Init>
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40012c00 	.word	0x40012c00
 8001194:	40021000 	.word	0x40021000
 8001198:	40010800 	.word	0x40010800
 800119c:	40000400 	.word	0x40000400

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a26      	ldr	r2, [pc, #152]	; (8001254 <HAL_UART_MspInit+0xb4>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d145      	bne.n	800124c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_UART_MspInit+0xb8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a24      	ldr	r2, [pc, #144]	; (8001258 <HAL_UART_MspInit+0xb8>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <HAL_UART_MspInit+0xb8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_UART_MspInit+0xb8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <HAL_UART_MspInit+0xb8>)
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_UART_MspInit+0xb8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011f0:	2340      	movs	r3, #64	; 0x40
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4816      	ldr	r0, [pc, #88]	; (800125c <HAL_UART_MspInit+0xbc>)
 8001204:	f000 fae0 	bl	80017c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4810      	ldr	r0, [pc, #64]	; (800125c <HAL_UART_MspInit+0xbc>)
 800121c:	f000 fad4 	bl	80017c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_UART_MspInit+0xc0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_UART_MspInit+0xc0>)
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	210f      	movs	r1, #15
 8001240:	2025      	movs	r0, #37	; 0x25
 8001242:	f000 f9da 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001246:	2025      	movs	r0, #37	; 0x25
 8001248:	f000 f9f3 	bl	8001632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40013800 	.word	0x40013800
 8001258:	40021000 	.word	0x40021000
 800125c:	40010c00 	.word	0x40010c00
 8001260:	40010000 	.word	0x40010000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012aa:	f000 f88f 	bl	80013cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <TIM3_IRQHandler+0x10>)
 80012ba:	f001 feff 	bl	80030bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000c8 	.word	0x200000c8

080012c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <USART1_IRQHandler+0x18>)
 80012ce:	f002 fd8f 	bl	8003df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,&r,1);
 80012d2:	2201      	movs	r2, #1
 80012d4:	4903      	ldr	r1, [pc, #12]	; (80012e4 <USART1_IRQHandler+0x1c>)
 80012d6:	4802      	ldr	r0, [pc, #8]	; (80012e0 <USART1_IRQHandler+0x18>)
 80012d8:	f002 fd5a 	bl	8003d90 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000110 	.word	0x20000110
 80012e4:	20000154 	.word	0x20000154

080012e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	; (8001338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131a:	f7ff ffe5 	bl	80012e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f003 f945 	bl	80045ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001322:	f7fe ff91 	bl	8000248 <main>
  bx lr
 8001326:	4770      	bx	lr
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001330:	080057cc 	.word	0x080057cc
  ldr r2, =_sbss
 8001334:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001338:	20000564 	.word	0x20000564

0800133c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC1_2_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_Init+0x28>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_Init+0x28>)
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f947 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001356:	200f      	movs	r0, #15
 8001358:	f000 f808 	bl	800136c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800135c:	f7ff fe10 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40022000 	.word	0x40022000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x54>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_InitTick+0x58>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	fbb3 f3f1 	udiv	r3, r3, r1
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f95f 	bl	800164e <HAL_SYSTICK_Config>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e00e      	b.n	80013b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d80a      	bhi.n	80013b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a8:	f000 f927 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_InitTick+0x5c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000004 	.word	0x20000004
 80013c4:	2000000c 	.word	0x2000000c
 80013c8:	20000008 	.word	0x20000008

080013cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_IncTick+0x1c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_IncTick+0x20>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_IncTick+0x20>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	2000000c 	.word	0x2000000c
 80013ec:	20000560 	.word	0x20000560

080013f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <HAL_GetTick+0x10>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20000560 	.word	0x20000560

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff fff0 	bl	80013f0 <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffe0 	bl	80013f0 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000000c 	.word	0x2000000c

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4906      	ldr	r1, [pc, #24]	; (80014e4 <__NVIC_EnableIRQ+0x34>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	; (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	; (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c4:	f7ff ff90 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff2d 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff42 	bl	8001494 <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff90 	bl	800153c <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5f 	bl	80014e8 <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff35 	bl	80014b0 <__NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffa2 	bl	80015a0 <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001678:	2b02      	cmp	r3, #2
 800167a:	d008      	beq.n	800168e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2204      	movs	r2, #4
 8001680:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e020      	b.n	80016d0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 020e 	bic.w	r2, r2, #14
 800169c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d005      	beq.n	80016fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2204      	movs	r2, #4
 80016f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e051      	b.n	80017a2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 020e 	bic.w	r2, r2, #14
 800170c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0201 	bic.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_DMA_Abort_IT+0xd0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d029      	beq.n	800177c <HAL_DMA_Abort_IT+0xa0>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <HAL_DMA_Abort_IT+0xd4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d022      	beq.n	8001778 <HAL_DMA_Abort_IT+0x9c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_DMA_Abort_IT+0xd8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d01a      	beq.n	8001772 <HAL_DMA_Abort_IT+0x96>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <HAL_DMA_Abort_IT+0xdc>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d012      	beq.n	800176c <HAL_DMA_Abort_IT+0x90>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <HAL_DMA_Abort_IT+0xe0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00a      	beq.n	8001766 <HAL_DMA_Abort_IT+0x8a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1a      	ldr	r2, [pc, #104]	; (80017c0 <HAL_DMA_Abort_IT+0xe4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d102      	bne.n	8001760 <HAL_DMA_Abort_IT+0x84>
 800175a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800175e:	e00e      	b.n	800177e <HAL_DMA_Abort_IT+0xa2>
 8001760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001764:	e00b      	b.n	800177e <HAL_DMA_Abort_IT+0xa2>
 8001766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176a:	e008      	b.n	800177e <HAL_DMA_Abort_IT+0xa2>
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	e005      	b.n	800177e <HAL_DMA_Abort_IT+0xa2>
 8001772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001776:	e002      	b.n	800177e <HAL_DMA_Abort_IT+0xa2>
 8001778:	2310      	movs	r3, #16
 800177a:	e000      	b.n	800177e <HAL_DMA_Abort_IT+0xa2>
 800177c:	2301      	movs	r3, #1
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_DMA_Abort_IT+0xe8>)
 8001780:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	4798      	blx	r3
    } 
  }
  return status;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40020008 	.word	0x40020008
 80017b0:	4002001c 	.word	0x4002001c
 80017b4:	40020030 	.word	0x40020030
 80017b8:	40020044 	.word	0x40020044
 80017bc:	40020058 	.word	0x40020058
 80017c0:	4002006c 	.word	0x4002006c
 80017c4:	40020000 	.word	0x40020000

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b08b      	sub	sp, #44	; 0x2c
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017da:	e169      	b.n	8001ab0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017dc:	2201      	movs	r2, #1
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	f040 8158 	bne.w	8001aaa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4a9a      	ldr	r2, [pc, #616]	; (8001a68 <HAL_GPIO_Init+0x2a0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d05e      	beq.n	80018c2 <HAL_GPIO_Init+0xfa>
 8001804:	4a98      	ldr	r2, [pc, #608]	; (8001a68 <HAL_GPIO_Init+0x2a0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d875      	bhi.n	80018f6 <HAL_GPIO_Init+0x12e>
 800180a:	4a98      	ldr	r2, [pc, #608]	; (8001a6c <HAL_GPIO_Init+0x2a4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d058      	beq.n	80018c2 <HAL_GPIO_Init+0xfa>
 8001810:	4a96      	ldr	r2, [pc, #600]	; (8001a6c <HAL_GPIO_Init+0x2a4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d86f      	bhi.n	80018f6 <HAL_GPIO_Init+0x12e>
 8001816:	4a96      	ldr	r2, [pc, #600]	; (8001a70 <HAL_GPIO_Init+0x2a8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d052      	beq.n	80018c2 <HAL_GPIO_Init+0xfa>
 800181c:	4a94      	ldr	r2, [pc, #592]	; (8001a70 <HAL_GPIO_Init+0x2a8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d869      	bhi.n	80018f6 <HAL_GPIO_Init+0x12e>
 8001822:	4a94      	ldr	r2, [pc, #592]	; (8001a74 <HAL_GPIO_Init+0x2ac>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d04c      	beq.n	80018c2 <HAL_GPIO_Init+0xfa>
 8001828:	4a92      	ldr	r2, [pc, #584]	; (8001a74 <HAL_GPIO_Init+0x2ac>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d863      	bhi.n	80018f6 <HAL_GPIO_Init+0x12e>
 800182e:	4a92      	ldr	r2, [pc, #584]	; (8001a78 <HAL_GPIO_Init+0x2b0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d046      	beq.n	80018c2 <HAL_GPIO_Init+0xfa>
 8001834:	4a90      	ldr	r2, [pc, #576]	; (8001a78 <HAL_GPIO_Init+0x2b0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d85d      	bhi.n	80018f6 <HAL_GPIO_Init+0x12e>
 800183a:	2b12      	cmp	r3, #18
 800183c:	d82a      	bhi.n	8001894 <HAL_GPIO_Init+0xcc>
 800183e:	2b12      	cmp	r3, #18
 8001840:	d859      	bhi.n	80018f6 <HAL_GPIO_Init+0x12e>
 8001842:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <HAL_GPIO_Init+0x80>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	080018c3 	.word	0x080018c3
 800184c:	0800189d 	.word	0x0800189d
 8001850:	080018af 	.word	0x080018af
 8001854:	080018f1 	.word	0x080018f1
 8001858:	080018f7 	.word	0x080018f7
 800185c:	080018f7 	.word	0x080018f7
 8001860:	080018f7 	.word	0x080018f7
 8001864:	080018f7 	.word	0x080018f7
 8001868:	080018f7 	.word	0x080018f7
 800186c:	080018f7 	.word	0x080018f7
 8001870:	080018f7 	.word	0x080018f7
 8001874:	080018f7 	.word	0x080018f7
 8001878:	080018f7 	.word	0x080018f7
 800187c:	080018f7 	.word	0x080018f7
 8001880:	080018f7 	.word	0x080018f7
 8001884:	080018f7 	.word	0x080018f7
 8001888:	080018f7 	.word	0x080018f7
 800188c:	080018a5 	.word	0x080018a5
 8001890:	080018b9 	.word	0x080018b9
 8001894:	4a79      	ldr	r2, [pc, #484]	; (8001a7c <HAL_GPIO_Init+0x2b4>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800189a:	e02c      	b.n	80018f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e029      	b.n	80018f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	3304      	adds	r3, #4
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e024      	b.n	80018f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	3308      	adds	r3, #8
 80018b4:	623b      	str	r3, [r7, #32]
          break;
 80018b6:	e01f      	b.n	80018f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	330c      	adds	r3, #12
 80018be:	623b      	str	r3, [r7, #32]
          break;
 80018c0:	e01a      	b.n	80018f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ca:	2304      	movs	r3, #4
 80018cc:	623b      	str	r3, [r7, #32]
          break;
 80018ce:	e013      	b.n	80018f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d8:	2308      	movs	r3, #8
 80018da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	611a      	str	r2, [r3, #16]
          break;
 80018e2:	e009      	b.n	80018f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e4:	2308      	movs	r3, #8
 80018e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	615a      	str	r2, [r3, #20]
          break;
 80018ee:	e003      	b.n	80018f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
          break;
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_Init+0x130>
          break;
 80018f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2bff      	cmp	r3, #255	; 0xff
 80018fc:	d801      	bhi.n	8001902 <HAL_GPIO_Init+0x13a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	e001      	b.n	8001906 <HAL_GPIO_Init+0x13e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3304      	adds	r3, #4
 8001906:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2bff      	cmp	r3, #255	; 0xff
 800190c:	d802      	bhi.n	8001914 <HAL_GPIO_Init+0x14c>
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x152>
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	3b08      	subs	r3, #8
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	210f      	movs	r1, #15
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	401a      	ands	r2, r3
 800192c:	6a39      	ldr	r1, [r7, #32]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	431a      	orrs	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80b1 	beq.w	8001aaa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001948:	4b4d      	ldr	r3, [pc, #308]	; (8001a80 <HAL_GPIO_Init+0x2b8>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a4c      	ldr	r2, [pc, #304]	; (8001a80 <HAL_GPIO_Init+0x2b8>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <HAL_GPIO_Init+0x2b8>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001960:	4a48      	ldr	r2, [pc, #288]	; (8001a84 <HAL_GPIO_Init+0x2bc>)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a40      	ldr	r2, [pc, #256]	; (8001a88 <HAL_GPIO_Init+0x2c0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d013      	beq.n	80019b4 <HAL_GPIO_Init+0x1ec>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a3f      	ldr	r2, [pc, #252]	; (8001a8c <HAL_GPIO_Init+0x2c4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00d      	beq.n	80019b0 <HAL_GPIO_Init+0x1e8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a3e      	ldr	r2, [pc, #248]	; (8001a90 <HAL_GPIO_Init+0x2c8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d007      	beq.n	80019ac <HAL_GPIO_Init+0x1e4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a3d      	ldr	r2, [pc, #244]	; (8001a94 <HAL_GPIO_Init+0x2cc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d101      	bne.n	80019a8 <HAL_GPIO_Init+0x1e0>
 80019a4:	2303      	movs	r3, #3
 80019a6:	e006      	b.n	80019b6 <HAL_GPIO_Init+0x1ee>
 80019a8:	2304      	movs	r3, #4
 80019aa:	e004      	b.n	80019b6 <HAL_GPIO_Init+0x1ee>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0x1ee>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_GPIO_Init+0x1ee>
 80019b4:	2300      	movs	r3, #0
 80019b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b8:	f002 0203 	and.w	r2, r2, #3
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	4093      	lsls	r3, r2
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019c6:	492f      	ldr	r1, [pc, #188]	; (8001a84 <HAL_GPIO_Init+0x2bc>)
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	492c      	ldr	r1, [pc, #176]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4928      	ldr	r1, [pc, #160]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4922      	ldr	r1, [pc, #136]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	491e      	ldr	r1, [pc, #120]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	4918      	ldr	r1, [pc, #96]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	4914      	ldr	r1, [pc, #80]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d021      	beq.n	8001a9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	490e      	ldr	r1, [pc, #56]	; (8001a98 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60cb      	str	r3, [r1, #12]
 8001a64:	e021      	b.n	8001aaa <HAL_GPIO_Init+0x2e2>
 8001a66:	bf00      	nop
 8001a68:	10320000 	.word	0x10320000
 8001a6c:	10310000 	.word	0x10310000
 8001a70:	10220000 	.word	0x10220000
 8001a74:	10210000 	.word	0x10210000
 8001a78:	10120000 	.word	0x10120000
 8001a7c:	10110000 	.word	0x10110000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	40010c00 	.word	0x40010c00
 8001a90:	40011000 	.word	0x40011000
 8001a94:	40011400 	.word	0x40011400
 8001a98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4909      	ldr	r1, [pc, #36]	; (8001acc <HAL_GPIO_Init+0x304>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f47f ae8e 	bne.w	80017dc <HAL_GPIO_Init+0x14>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	372c      	adds	r7, #44	; 0x2c
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40010400 	.word	0x40010400

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aec:	e003      	b.n	8001af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e12b      	b.n	8001d6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fa5c 	bl	8000fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2224      	movs	r2, #36	; 0x24
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0201 	bic.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b64:	f001 f91a 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8001b68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a81      	ldr	r2, [pc, #516]	; (8001d74 <HAL_I2C_Init+0x274>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d807      	bhi.n	8001b84 <HAL_I2C_Init+0x84>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4a80      	ldr	r2, [pc, #512]	; (8001d78 <HAL_I2C_Init+0x278>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	bf94      	ite	ls
 8001b7c:	2301      	movls	r3, #1
 8001b7e:	2300      	movhi	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	e006      	b.n	8001b92 <HAL_I2C_Init+0x92>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4a7d      	ldr	r2, [pc, #500]	; (8001d7c <HAL_I2C_Init+0x27c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	bf94      	ite	ls
 8001b8c:	2301      	movls	r3, #1
 8001b8e:	2300      	movhi	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0e7      	b.n	8001d6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4a78      	ldr	r2, [pc, #480]	; (8001d80 <HAL_I2C_Init+0x280>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0c9b      	lsrs	r3, r3, #18
 8001ba4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a6a      	ldr	r2, [pc, #424]	; (8001d74 <HAL_I2C_Init+0x274>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d802      	bhi.n	8001bd4 <HAL_I2C_Init+0xd4>
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	e009      	b.n	8001be8 <HAL_I2C_Init+0xe8>
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	4a69      	ldr	r2, [pc, #420]	; (8001d84 <HAL_I2C_Init+0x284>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	3301      	adds	r3, #1
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	495c      	ldr	r1, [pc, #368]	; (8001d74 <HAL_I2C_Init+0x274>)
 8001c04:	428b      	cmp	r3, r1
 8001c06:	d819      	bhi.n	8001c3c <HAL_I2C_Init+0x13c>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e59      	subs	r1, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00a      	beq.n	8001c38 <HAL_I2C_Init+0x138>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1e59      	subs	r1, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c36:	e051      	b.n	8001cdc <HAL_I2C_Init+0x1dc>
 8001c38:	2304      	movs	r3, #4
 8001c3a:	e04f      	b.n	8001cdc <HAL_I2C_Init+0x1dc>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d111      	bne.n	8001c68 <HAL_I2C_Init+0x168>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1e58      	subs	r0, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	440b      	add	r3, r1
 8001c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	e012      	b.n	8001c8e <HAL_I2C_Init+0x18e>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1e58      	subs	r0, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	0099      	lsls	r1, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Init+0x196>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e022      	b.n	8001cdc <HAL_I2C_Init+0x1dc>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10e      	bne.n	8001cbc <HAL_I2C_Init+0x1bc>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1e58      	subs	r0, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6859      	ldr	r1, [r3, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	440b      	add	r3, r1
 8001cac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cba:	e00f      	b.n	8001cdc <HAL_I2C_Init+0x1dc>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1e58      	subs	r0, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	0099      	lsls	r1, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	6809      	ldr	r1, [r1, #0]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6911      	ldr	r1, [r2, #16]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68d2      	ldr	r2, [r2, #12]
 8001d16:	4311      	orrs	r1, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	000186a0 	.word	0x000186a0
 8001d78:	001e847f 	.word	0x001e847f
 8001d7c:	003d08ff 	.word	0x003d08ff
 8001d80:	431bde83 	.word	0x431bde83
 8001d84:	10624dd3 	.word	0x10624dd3

08001d88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	460b      	mov	r3, r1
 8001d96:	817b      	strh	r3, [r7, #10]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff fb28 	bl	80013f0 <HAL_GetTick>
 8001da0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	f040 80e0 	bne.w	8001f70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2319      	movs	r3, #25
 8001db6:	2201      	movs	r2, #1
 8001db8:	4970      	ldr	r1, [pc, #448]	; (8001f7c <HAL_I2C_Master_Transmit+0x1f4>)
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 fa92 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e0d3      	b.n	8001f72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_I2C_Master_Transmit+0x50>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e0cc      	b.n	8001f72 <HAL_I2C_Master_Transmit+0x1ea>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d007      	beq.n	8001dfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2221      	movs	r2, #33	; 0x21
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	893a      	ldrh	r2, [r7, #8]
 8001e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a50      	ldr	r2, [pc, #320]	; (8001f80 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e40:	8979      	ldrh	r1, [r7, #10]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	6a3a      	ldr	r2, [r7, #32]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f9ca 	bl	80021e0 <I2C_MasterRequestWrite>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e08d      	b.n	8001f72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e6c:	e066      	b.n	8001f3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	6a39      	ldr	r1, [r7, #32]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fb0c 	bl	8002490 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d107      	bne.n	8001e96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06b      	b.n	8001f72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d11b      	bne.n	8001f10 <HAL_I2C_Master_Transmit+0x188>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d017      	beq.n	8001f10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee4:	781a      	ldrb	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	6a39      	ldr	r1, [r7, #32]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fafc 	bl	8002512 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00d      	beq.n	8001f3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d107      	bne.n	8001f38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e01a      	b.n	8001f72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d194      	bne.n	8001e6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
  }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	00100002 	.word	0x00100002
 8001f80:	ffff0000 	.word	0xffff0000

08001f84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	460b      	mov	r3, r1
 8001f92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff fa2c 	bl	80013f0 <HAL_GetTick>
 8001f98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	f040 8111 	bne.w	80021ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2319      	movs	r3, #25
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4988      	ldr	r1, [pc, #544]	; (80021d8 <HAL_I2C_IsDeviceReady+0x254>)
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f994 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e104      	b.n	80021d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_I2C_IsDeviceReady+0x50>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e0fd      	b.n	80021d0 <HAL_I2C_IsDeviceReady+0x24c>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d007      	beq.n	8001ffa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002008:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2224      	movs	r2, #36	; 0x24
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a70      	ldr	r2, [pc, #448]	; (80021dc <HAL_I2C_IsDeviceReady+0x258>)
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800202c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2200      	movs	r2, #0
 8002036:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f952 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002054:	d103      	bne.n	800205e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0b6      	b.n	80021d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002062:	897b      	ldrh	r3, [r7, #10]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002070:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002072:	f7ff f9bd 	bl	80013f0 <HAL_GetTick>
 8002076:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b02      	cmp	r3, #2
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020a6:	e025      	b.n	80020f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020a8:	f7ff f9a2 	bl	80013f0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d302      	bcc.n	80020be <HAL_I2C_IsDeviceReady+0x13a>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d103      	bne.n	80020c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	22a0      	movs	r2, #160	; 0xa0
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2ba0      	cmp	r3, #160	; 0xa0
 80020fe:	d005      	beq.n	800210c <HAL_I2C_IsDeviceReady+0x188>
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <HAL_I2C_IsDeviceReady+0x188>
 8002106:	7dbb      	ldrb	r3, [r7, #22]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0cd      	beq.n	80020a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b02      	cmp	r3, #2
 8002120:	d129      	bne.n	8002176 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002130:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2319      	movs	r3, #25
 800214e:	2201      	movs	r2, #1
 8002150:	4921      	ldr	r1, [pc, #132]	; (80021d8 <HAL_I2C_IsDeviceReady+0x254>)
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f8c6 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e036      	b.n	80021d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	e02c      	b.n	80021d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002184:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800218e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2319      	movs	r3, #25
 8002196:	2201      	movs	r2, #1
 8002198:	490f      	ldr	r1, [pc, #60]	; (80021d8 <HAL_I2C_IsDeviceReady+0x254>)
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f8a2 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e012      	b.n	80021d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	f4ff af32 	bcc.w	800201e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
  }
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	00100002 	.word	0x00100002
 80021dc:	ffff0000 	.word	0xffff0000

080021e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d006      	beq.n	800220a <I2C_MasterRequestWrite+0x2a>
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d003      	beq.n	800220a <I2C_MasterRequestWrite+0x2a>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002208:	d108      	bne.n	800221c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e00b      	b.n	8002234 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	2b12      	cmp	r3, #18
 8002222:	d107      	bne.n	8002234 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002232:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f84f 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225a:	d103      	bne.n	8002264 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e035      	b.n	80022d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002270:	d108      	bne.n	8002284 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002280:	611a      	str	r2, [r3, #16]
 8002282:	e01b      	b.n	80022bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002284:	897b      	ldrh	r3, [r7, #10]
 8002286:	11db      	asrs	r3, r3, #7
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0306 	and.w	r3, r3, #6
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f063 030f 	orn	r3, r3, #15
 8002294:	b2da      	uxtb	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	490e      	ldr	r1, [pc, #56]	; (80022dc <I2C_MasterRequestWrite+0xfc>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f875 	bl	8002392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e010      	b.n	80022d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <I2C_MasterRequestWrite+0x100>)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f865 	bl	8002392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	00010008 	.word	0x00010008
 80022e0:	00010002 	.word	0x00010002

080022e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f4:	e025      	b.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022fc:	d021      	beq.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7ff f877 	bl	80013f0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d116      	bne.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e023      	b.n	800238a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	d10d      	bne.n	8002368 <I2C_WaitOnFlagUntilTimeout+0x84>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4013      	ands	r3, r2
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	e00c      	b.n	8002382 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4013      	ands	r3, r2
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	429a      	cmp	r2, r3
 8002386:	d0b6      	beq.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a0:	e051      	b.n	8002446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b0:	d123      	bne.n	80023fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f043 0204 	orr.w	r2, r3, #4
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e046      	b.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002400:	d021      	beq.n	8002446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002402:	f7fe fff5 	bl	80013f0 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d302      	bcc.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d116      	bne.n	8002446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f043 0220 	orr.w	r2, r3, #32
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e020      	b.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d10c      	bne.n	800246a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	43da      	mvns	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4013      	ands	r3, r2
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	e00b      	b.n	8002482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	43da      	mvns	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4013      	ands	r3, r2
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d18d      	bne.n	80023a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800249c:	e02d      	b.n	80024fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f878 	bl	8002594 <I2C_IsAcknowledgeFailed>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e02d      	b.n	800250a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b4:	d021      	beq.n	80024fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7fe ff9b 	bl	80013f0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d116      	bne.n	80024fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f043 0220 	orr.w	r2, r3, #32
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e007      	b.n	800250a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d1ca      	bne.n	800249e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800251e:	e02d      	b.n	800257c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f837 	bl	8002594 <I2C_IsAcknowledgeFailed>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e02d      	b.n	800258c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002536:	d021      	beq.n	800257c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7fe ff5a 	bl	80013f0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e007      	b.n	800258c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b04      	cmp	r3, #4
 8002588:	d1ca      	bne.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025aa:	d11b      	bne.n	80025e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f043 0204 	orr.w	r2, r3, #4
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e272      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8087 	beq.w	800271e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002610:	4b92      	ldr	r3, [pc, #584]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b04      	cmp	r3, #4
 800261a:	d00c      	beq.n	8002636 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800261c:	4b8f      	ldr	r3, [pc, #572]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b08      	cmp	r3, #8
 8002626:	d112      	bne.n	800264e <HAL_RCC_OscConfig+0x5e>
 8002628:	4b8c      	ldr	r3, [pc, #560]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d10b      	bne.n	800264e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002636:	4b89      	ldr	r3, [pc, #548]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d06c      	beq.n	800271c <HAL_RCC_OscConfig+0x12c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d168      	bne.n	800271c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e24c      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002656:	d106      	bne.n	8002666 <HAL_RCC_OscConfig+0x76>
 8002658:	4b80      	ldr	r3, [pc, #512]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a7f      	ldr	r2, [pc, #508]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e02e      	b.n	80026c4 <HAL_RCC_OscConfig+0xd4>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x98>
 800266e:	4b7b      	ldr	r3, [pc, #492]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a7a      	ldr	r2, [pc, #488]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b78      	ldr	r3, [pc, #480]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a77      	ldr	r2, [pc, #476]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e01d      	b.n	80026c4 <HAL_RCC_OscConfig+0xd4>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0xbc>
 8002692:	4b72      	ldr	r3, [pc, #456]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a71      	ldr	r2, [pc, #452]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b6f      	ldr	r3, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6e      	ldr	r2, [pc, #440]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e00b      	b.n	80026c4 <HAL_RCC_OscConfig+0xd4>
 80026ac:	4b6b      	ldr	r3, [pc, #428]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a6a      	ldr	r2, [pc, #424]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b68      	ldr	r3, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a67      	ldr	r2, [pc, #412]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80026be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fe90 	bl	80013f0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe fe8c 	bl	80013f0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e200      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	4b5d      	ldr	r3, [pc, #372]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0xe4>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fe7c 	bl	80013f0 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fe78 	bl	80013f0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e1ec      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x10c>
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d063      	beq.n	80027f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800272a:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b08      	cmp	r3, #8
 8002740:	d11c      	bne.n	800277c <HAL_RCC_OscConfig+0x18c>
 8002742:	4b46      	ldr	r3, [pc, #280]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d116      	bne.n	800277c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	4b43      	ldr	r3, [pc, #268]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_RCC_OscConfig+0x176>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1c0      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4939      	ldr	r1, [pc, #228]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	e03a      	b.n	80027f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d020      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002784:	4b36      	ldr	r3, [pc, #216]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278a:	f7fe fe31 	bl	80013f0 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002792:	f7fe fe2d 	bl	80013f0 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e1a1      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b2a      	ldr	r3, [pc, #168]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4927      	ldr	r1, [pc, #156]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
 80027c4:	e015      	b.n	80027f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_RCC_OscConfig+0x270>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fe10 	bl	80013f0 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d4:	f7fe fe0c 	bl	80013f0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e180      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d03a      	beq.n	8002874 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d019      	beq.n	800283a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <HAL_RCC_OscConfig+0x274>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280c:	f7fe fdf0 	bl	80013f0 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002814:	f7fe fdec 	bl	80013f0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e160      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	4b0d      	ldr	r3, [pc, #52]	; (800285c <HAL_RCC_OscConfig+0x26c>)
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002832:	2001      	movs	r0, #1
 8002834:	f000 fada 	bl	8002dec <RCC_Delay>
 8002838:	e01c      	b.n	8002874 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_RCC_OscConfig+0x274>)
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002840:	f7fe fdd6 	bl	80013f0 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002846:	e00f      	b.n	8002868 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002848:	f7fe fdd2 	bl	80013f0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d908      	bls.n	8002868 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e146      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	42420000 	.word	0x42420000
 8002864:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	4b92      	ldr	r3, [pc, #584]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e9      	bne.n	8002848 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80a6 	beq.w	80029ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10d      	bne.n	80028ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	4a87      	ldr	r2, [pc, #540]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	61d3      	str	r3, [r2, #28]
 800289e:	4b85      	ldr	r3, [pc, #532]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b82      	ldr	r3, [pc, #520]	; (8002ab8 <HAL_RCC_OscConfig+0x4c8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d118      	bne.n	80028ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b7f      	ldr	r3, [pc, #508]	; (8002ab8 <HAL_RCC_OscConfig+0x4c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7e      	ldr	r2, [pc, #504]	; (8002ab8 <HAL_RCC_OscConfig+0x4c8>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7fe fd93 	bl	80013f0 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe fd8f 	bl	80013f0 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b64      	cmp	r3, #100	; 0x64
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e103      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b75      	ldr	r3, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x4c8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x312>
 80028f4:	4b6f      	ldr	r3, [pc, #444]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a6e      	ldr	r2, [pc, #440]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6213      	str	r3, [r2, #32]
 8002900:	e02d      	b.n	800295e <HAL_RCC_OscConfig+0x36e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x334>
 800290a:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a69      	ldr	r2, [pc, #420]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	6213      	str	r3, [r2, #32]
 8002916:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4a66      	ldr	r2, [pc, #408]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 0304 	bic.w	r3, r3, #4
 8002920:	6213      	str	r3, [r2, #32]
 8002922:	e01c      	b.n	800295e <HAL_RCC_OscConfig+0x36e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b05      	cmp	r3, #5
 800292a:	d10c      	bne.n	8002946 <HAL_RCC_OscConfig+0x356>
 800292c:	4b61      	ldr	r3, [pc, #388]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	4a60      	ldr	r2, [pc, #384]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6213      	str	r3, [r2, #32]
 8002938:	4b5e      	ldr	r3, [pc, #376]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4a5d      	ldr	r2, [pc, #372]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6213      	str	r3, [r2, #32]
 8002944:	e00b      	b.n	800295e <HAL_RCC_OscConfig+0x36e>
 8002946:	4b5b      	ldr	r3, [pc, #364]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4a5a      	ldr	r2, [pc, #360]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6213      	str	r3, [r2, #32]
 8002952:	4b58      	ldr	r3, [pc, #352]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a57      	ldr	r2, [pc, #348]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f023 0304 	bic.w	r3, r3, #4
 800295c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d015      	beq.n	8002992 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7fe fd43 	bl	80013f0 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe fd3f 	bl	80013f0 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	; 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e0b1      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ee      	beq.n	800296e <HAL_RCC_OscConfig+0x37e>
 8002990:	e014      	b.n	80029bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fe fd2d 	bl	80013f0 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fe fd29 	bl	80013f0 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e09b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b0:	4b40      	ldr	r3, [pc, #256]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ee      	bne.n	800299a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d105      	bne.n	80029ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c2:	4b3c      	ldr	r3, [pc, #240]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8087 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d061      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d146      	bne.n	8002a7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ec:	4b33      	ldr	r3, [pc, #204]	; (8002abc <HAL_RCC_OscConfig+0x4cc>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fe fcfd 	bl	80013f0 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fa:	f7fe fcf9 	bl	80013f0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e06d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f0      	bne.n	80029fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a20:	d108      	bne.n	8002a34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4921      	ldr	r1, [pc, #132]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a19      	ldr	r1, [r3, #32]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	430b      	orrs	r3, r1
 8002a46:	491b      	ldr	r1, [pc, #108]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCC_OscConfig+0x4cc>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a52:	f7fe fccd 	bl	80013f0 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe fcc9 	bl	80013f0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e03d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0f0      	beq.n	8002a5a <HAL_RCC_OscConfig+0x46a>
 8002a78:	e035      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_RCC_OscConfig+0x4cc>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7fe fcb6 	bl	80013f0 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe fcb2 	bl	80013f0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e026      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x498>
 8002aa6:	e01e      	b.n	8002ae6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e019      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40007000 	.word	0x40007000
 8002abc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_OscConfig+0x500>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0d0      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d910      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b67      	ldr	r3, [pc, #412]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 0207 	bic.w	r2, r3, #7
 8002b1e:	4965      	ldr	r1, [pc, #404]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	494d      	ldr	r1, [pc, #308]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d040      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d115      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e073      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e06b      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd2:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f023 0203 	bic.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4936      	ldr	r1, [pc, #216]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be4:	f7fe fc04 	bl	80013f0 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fe fc00 	bl	80013f0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e053      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 020c 	and.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d1eb      	bne.n	8002bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c14:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d210      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 0207 	bic.w	r2, r3, #7
 8002c2a:	4922      	ldr	r1, [pc, #136]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 f821 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490a      	ldr	r1, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fb62 	bl	800136c <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40022000 	.word	0x40022000
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	080057ac 	.word	0x080057ac
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	b490      	push	{r4, r7}
 8002cca:	b08a      	sub	sp, #40	; 0x28
 8002ccc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cce:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xac>)
 8002cd0:	1d3c      	adds	r4, r7, #4
 8002cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cd8:	f240 2301 	movw	r3, #513	; 0x201
 8002cdc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x46>
 8002d06:	e02b      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d08:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d0a:	623b      	str	r3, [r7, #32]
      break;
 8002d0c:	e02b      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	0c9b      	lsrs	r3, r3, #18
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	3328      	adds	r3, #40	; 0x28
 8002d18:	443b      	add	r3, r7
 8002d1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d1e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d012      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	0c5b      	lsrs	r3, r3, #17
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	3328      	adds	r3, #40	; 0x28
 8002d36:	443b      	add	r3, r7
 8002d38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d42:	fb03 f202 	mul.w	r2, r3, r2
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	e004      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	623b      	str	r3, [r7, #32]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d62:	623b      	str	r3, [r7, #32]
      break;
 8002d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d66:	6a3b      	ldr	r3, [r7, #32]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3728      	adds	r7, #40	; 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc90      	pop	{r4, r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	0800461c 	.word	0x0800461c
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	00b71b00 	.word	0x00b71b00
 8002d80:	003d0900 	.word	0x003d0900
 8002d84:	007a1200 	.word	0x007a1200

08002d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002da0:	f7ff fff2 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	080057bc 	.word	0x080057bc

08002dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dc8:	f7ff ffde 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	0adb      	lsrs	r3, r3, #11
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000
 8002de8:	080057bc 	.word	0x080057bc

08002dec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <RCC_Delay+0x34>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <RCC_Delay+0x38>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0a5b      	lsrs	r3, r3, #9
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e08:	bf00      	nop
  }
  while (Delay --);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	60fa      	str	r2, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f9      	bne.n	8002e08 <RCC_Delay+0x1c>
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	20000004 	.word	0x20000004
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e041      	b.n	8002ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe f918 	bl	8001084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f000 fbe0 	bl	800362c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e041      	b.n	8002f5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f839 	bl	8002f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f000 fb91 	bl	800362c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <HAL_TIM_PWM_Start+0x24>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e022      	b.n	8002fe2 <HAL_TIM_PWM_Start+0x6a>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d109      	bne.n	8002fb6 <HAL_TIM_PWM_Start+0x3e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e015      	b.n	8002fe2 <HAL_TIM_PWM_Start+0x6a>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d109      	bne.n	8002fd0 <HAL_TIM_PWM_Start+0x58>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	e008      	b.n	8002fe2 <HAL_TIM_PWM_Start+0x6a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e05e      	b.n	80030a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <HAL_TIM_PWM_Start+0x82>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff8:	e013      	b.n	8003022 <HAL_TIM_PWM_Start+0xaa>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d104      	bne.n	800300a <HAL_TIM_PWM_Start+0x92>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003008:	e00b      	b.n	8003022 <HAL_TIM_PWM_Start+0xaa>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d104      	bne.n	800301a <HAL_TIM_PWM_Start+0xa2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003018:	e003      	b.n	8003022 <HAL_TIM_PWM_Start+0xaa>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2201      	movs	r2, #1
 8003028:	6839      	ldr	r1, [r7, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fd7e 	bl	8003b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <HAL_TIM_PWM_Start+0x138>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d107      	bne.n	800304a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <HAL_TIM_PWM_Start+0x138>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00e      	beq.n	8003072 <HAL_TIM_PWM_Start+0xfa>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d009      	beq.n	8003072 <HAL_TIM_PWM_Start+0xfa>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <HAL_TIM_PWM_Start+0x13c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d004      	beq.n	8003072 <HAL_TIM_PWM_Start+0xfa>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <HAL_TIM_PWM_Start+0x140>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d111      	bne.n	8003096 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b06      	cmp	r3, #6
 8003082:	d010      	beq.n	80030a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003094:	e007      	b.n	80030a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800

080030bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0202 	mvn.w	r2, #2
 80030e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa78 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fa6b 	bl	80035e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fa7a 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0204 	mvn.w	r2, #4
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fa4e 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa41 	bl	80035e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fa50 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b08      	cmp	r3, #8
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b08      	cmp	r3, #8
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0208 	mvn.w	r2, #8
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2204      	movs	r2, #4
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fa24 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa17 	bl	80035e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fa26 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b10      	cmp	r3, #16
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0210 	mvn.w	r2, #16
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2208      	movs	r2, #8
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f9fa 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9ed 	bl	80035e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f9fc 	bl	8003606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d10e      	bne.n	8003240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0201 	mvn.w	r2, #1
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f9c8 	bl	80035d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324a:	2b80      	cmp	r3, #128	; 0x80
 800324c:	d10e      	bne.n	800326c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d107      	bne.n	800326c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fd3c 	bl	8003ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d107      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f9c0 	bl	8003618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0220 	mvn.w	r2, #32
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fd07 	bl	8003cd2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0ac      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x174>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b0c      	cmp	r3, #12
 80032f2:	f200 809f 	bhi.w	8003434 <HAL_TIM_PWM_ConfigChannel+0x168>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003435 	.word	0x08003435
 8003304:	08003435 	.word	0x08003435
 8003308:	08003435 	.word	0x08003435
 800330c:	08003371 	.word	0x08003371
 8003310:	08003435 	.word	0x08003435
 8003314:	08003435 	.word	0x08003435
 8003318:	08003435 	.word	0x08003435
 800331c:	080033b3 	.word	0x080033b3
 8003320:	08003435 	.word	0x08003435
 8003324:	08003435 	.word	0x08003435
 8003328:	08003435 	.word	0x08003435
 800332c:	080033f3 	.word	0x080033f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f9da 	bl	80036f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0208 	orr.w	r2, r2, #8
 800334a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	619a      	str	r2, [r3, #24]
      break;
 800336e:	e062      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fa20 	bl	80037bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800338a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6999      	ldr	r1, [r3, #24]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	021a      	lsls	r2, r3, #8
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	619a      	str	r2, [r3, #24]
      break;
 80033b0:	e041      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fa69 	bl	8003890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0208 	orr.w	r2, r2, #8
 80033cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0204 	bic.w	r2, r2, #4
 80033dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69d9      	ldr	r1, [r3, #28]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	61da      	str	r2, [r3, #28]
      break;
 80033f0:	e021      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fab3 	bl	8003964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800340c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69d9      	ldr	r1, [r3, #28]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	021a      	lsls	r2, r3, #8
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	61da      	str	r2, [r3, #28]
      break;
 8003432:	e000      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIM_ConfigClockSource+0x18>
 800345c:	2302      	movs	r3, #2
 800345e:	e0b3      	b.n	80035c8 <HAL_TIM_ConfigClockSource+0x180>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800347e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003486:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003498:	d03e      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0xd0>
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349e:	f200 8087 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x168>
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a6:	f000 8085 	beq.w	80035b4 <HAL_TIM_ConfigClockSource+0x16c>
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ae:	d87f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x168>
 80034b0:	2b70      	cmp	r3, #112	; 0x70
 80034b2:	d01a      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0xa2>
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d87b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x168>
 80034b8:	2b60      	cmp	r3, #96	; 0x60
 80034ba:	d050      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x116>
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d877      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x168>
 80034c0:	2b50      	cmp	r3, #80	; 0x50
 80034c2:	d03c      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xf6>
 80034c4:	2b50      	cmp	r3, #80	; 0x50
 80034c6:	d873      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x168>
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d058      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x136>
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d86f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x168>
 80034d0:	2b30      	cmp	r3, #48	; 0x30
 80034d2:	d064      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x156>
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d86b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x168>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d060      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x156>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d867      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x168>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d05c      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x156>
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d05a      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034e8:	e062      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f000 faf8 	bl	8003aee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800350c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	609a      	str	r2, [r3, #8]
      break;
 8003516:	e04e      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f000 fae1 	bl	8003aee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e03b      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	461a      	mov	r2, r3
 800354c:	f000 fa58 	bl	8003a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2150      	movs	r1, #80	; 0x50
 8003556:	4618      	mov	r0, r3
 8003558:	f000 faaf 	bl	8003aba <TIM_ITRx_SetConfig>
      break;
 800355c:	e02b      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	461a      	mov	r2, r3
 800356c:	f000 fa76 	bl	8003a5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2160      	movs	r1, #96	; 0x60
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fa9f 	bl	8003aba <TIM_ITRx_SetConfig>
      break;
 800357c:	e01b      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	461a      	mov	r2, r3
 800358c:	f000 fa38 	bl	8003a00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2140      	movs	r1, #64	; 0x40
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa8f 	bl	8003aba <TIM_ITRx_SetConfig>
      break;
 800359c:	e00b      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f000 fa86 	bl	8003aba <TIM_ITRx_SetConfig>
        break;
 80035ae:	e002      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
	...

0800362c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <TIM_Base_SetConfig+0xb8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0x30>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0x30>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <TIM_Base_SetConfig+0xbc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0x30>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a25      	ldr	r2, [pc, #148]	; (80036ec <TIM_Base_SetConfig+0xc0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d108      	bne.n	800366e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <TIM_Base_SetConfig+0xb8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00b      	beq.n	800368e <TIM_Base_SetConfig+0x62>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367c:	d007      	beq.n	800368e <TIM_Base_SetConfig+0x62>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <TIM_Base_SetConfig+0xbc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d003      	beq.n	800368e <TIM_Base_SetConfig+0x62>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a18      	ldr	r2, [pc, #96]	; (80036ec <TIM_Base_SetConfig+0xc0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d108      	bne.n	80036a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <TIM_Base_SetConfig+0xb8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d103      	bne.n	80036d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	615a      	str	r2, [r3, #20]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800

080036f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0201 	bic.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0303 	bic.w	r3, r3, #3
 8003726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f023 0302 	bic.w	r3, r3, #2
 8003738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <TIM_OC1_SetConfig+0xc8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d10c      	bne.n	8003766 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0308 	bic.w	r3, r3, #8
 8003752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 0304 	bic.w	r3, r3, #4
 8003764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <TIM_OC1_SetConfig+0xc8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d111      	bne.n	8003792 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800377c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	621a      	str	r2, [r3, #32]
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00

080037bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f023 0210 	bic.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0320 	bic.w	r3, r3, #32
 8003806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1d      	ldr	r2, [pc, #116]	; (800388c <TIM_OC2_SetConfig+0xd0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10d      	bne.n	8003838 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003836:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <TIM_OC2_SetConfig+0xd0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d113      	bne.n	8003868 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00

08003890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <TIM_OC3_SetConfig+0xd0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10d      	bne.n	800390a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <TIM_OC3_SetConfig+0xd0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40012c00 	.word	0x40012c00

08003964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	031b      	lsls	r3, r3, #12
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <TIM_OC4_SetConfig+0x98>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d109      	bne.n	80039d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	40012c00 	.word	0x40012c00

08003a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f023 0201 	bic.w	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 030a 	bic.w	r3, r3, #10
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f023 0210 	bic.w	r2, r3, #16
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	031b      	lsls	r3, r3, #12
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	621a      	str	r2, [r3, #32]
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f043 0307 	orr.w	r3, r3, #7
 8003adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	609a      	str	r2, [r3, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	609a      	str	r2, [r3, #8]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	2201      	movs	r2, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a1a      	ldr	r2, [r3, #32]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	401a      	ands	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e046      	b.n	8003c1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd8:	d009      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10c      	bne.n	8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800

08003c30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e03d      	b.n	8003cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e03f      	b.n	8003d88 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fd fa3f 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2224      	movs	r2, #36	; 0x24
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fba8 	bl	8004490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d11d      	bne.n	8003de6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_UART_Receive_IT+0x26>
 8003db0:	88fb      	ldrh	r3, [r7, #6]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e016      	b.n	8003de8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_UART_Receive_IT+0x38>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e00f      	b.n	8003de8 <HAL_UART_Receive_IT+0x58>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f9ce 	bl	800417e <UART_Start_Receive_IT>
 8003de2:	4603      	mov	r3, r0
 8003de4:	e000      	b.n	8003de8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10d      	bne.n	8003e42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_UART_IRQHandler+0x52>
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fa7f 	bl	800433e <UART_Receive_IT>
      return;
 8003e40:	e17b      	b.n	800413a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80b1 	beq.w	8003fac <HAL_UART_IRQHandler+0x1bc>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_UART_IRQHandler+0x70>
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 80a6 	beq.w	8003fac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_UART_IRQHandler+0x90>
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_UART_IRQHandler+0xb0>
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	f043 0202 	orr.w	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xd0>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f043 0204 	orr.w	r2, r3, #4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00f      	beq.n	8003eea <HAL_UART_IRQHandler+0xfa>
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <HAL_UART_IRQHandler+0xee>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f043 0208 	orr.w	r2, r3, #8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 811e 	beq.w	8004130 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_UART_IRQHandler+0x11e>
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fa18 	bl	800433e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <HAL_UART_IRQHandler+0x146>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d031      	beq.n	8003f9a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f95a 	bl	80041f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d023      	beq.n	8003f92 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f58:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d013      	beq.n	8003f8a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	4a76      	ldr	r2, [pc, #472]	; (8004140 <HAL_UART_IRQHandler+0x350>)
 8003f68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fd fbb4 	bl	80016dc <HAL_DMA_Abort_IT>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f84:	4610      	mov	r0, r2
 8003f86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f88:	e00e      	b.n	8003fa8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8e3 	bl	8004156 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f90:	e00a      	b.n	8003fa8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8df 	bl	8004156 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f98:	e006      	b.n	8003fa8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8db 	bl	8004156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fa6:	e0c3      	b.n	8004130 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	bf00      	nop
    return;
 8003faa:	e0c1      	b.n	8004130 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 80a1 	bne.w	80040f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 809b 	beq.w	80040f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8095 	beq.w	80040f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d04e      	beq.n	8004090 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ffc:	8a3b      	ldrh	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8098 	beq.w	8004134 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004008:	8a3a      	ldrh	r2, [r7, #16]
 800400a:	429a      	cmp	r2, r3
 800400c:	f080 8092 	bcs.w	8004134 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8a3a      	ldrh	r2, [r7, #16]
 8004014:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b20      	cmp	r3, #32
 800401e:	d02b      	beq.n	8004078 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800402e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0210 	bic.w	r2, r2, #16
 800406c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	4618      	mov	r0, r3
 8004074:	f7fd faf7 	bl	8001666 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	b29b      	uxth	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f86d 	bl	8004168 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800408e:	e051      	b.n	8004134 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004098:	b29b      	uxth	r3, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d047      	beq.n	8004138 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040a8:	8a7b      	ldrh	r3, [r7, #18]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d044      	beq.n	8004138 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0210 	bic.w	r2, r2, #16
 80040ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ec:	8a7b      	ldrh	r3, [r7, #18]
 80040ee:	4619      	mov	r1, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f839 	bl	8004168 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040f6:	e01f      	b.n	8004138 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_UART_IRQHandler+0x324>
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f8af 	bl	8004270 <UART_Transmit_IT>
    return;
 8004112:	e012      	b.n	800413a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <HAL_UART_IRQHandler+0x34a>
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8f0 	bl	800430e <UART_EndTransmit_IT>
    return;
 800412e:	e004      	b.n	800413a <HAL_UART_IRQHandler+0x34a>
    return;
 8004130:	bf00      	nop
 8004132:	e002      	b.n	800413a <HAL_UART_IRQHandler+0x34a>
      return;
 8004134:	bf00      	nop
 8004136:	e000      	b.n	800413a <HAL_UART_IRQHandler+0x34a>
      return;
 8004138:	bf00      	nop
  }
}
 800413a:	3728      	adds	r7, #40	; 0x28
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	08004249 	.word	0x08004249

08004144 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	4613      	mov	r3, r2
 800418a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	88fa      	ldrh	r2, [r7, #6]
 8004196:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2222      	movs	r2, #34	; 0x22
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0220 	orr.w	r2, r2, #32
 80041e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004206:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0210 	bic.w	r2, r2, #16
 800422e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7ff ff77 	bl	8004156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b21      	cmp	r3, #33	; 0x21
 8004282:	d13e      	bne.n	8004302 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428c:	d114      	bne.n	80042b8 <UART_Transmit_IT+0x48>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d110      	bne.n	80042b8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	1c9a      	adds	r2, r3, #2
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	621a      	str	r2, [r3, #32]
 80042b6:	e008      	b.n	80042ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	1c59      	adds	r1, r3, #1
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6211      	str	r1, [r2, #32]
 80042c2:	781a      	ldrb	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4619      	mov	r1, r3
 80042d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr

0800430e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004324:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ff08 	bl	8004144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b086      	sub	sp, #24
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b22      	cmp	r3, #34	; 0x22
 8004350:	f040 8099 	bne.w	8004486 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435c:	d117      	bne.n	800438e <UART_Receive_IT+0x50>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d113      	bne.n	800438e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437c:	b29a      	uxth	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	1c9a      	adds	r2, r3, #2
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28
 800438c:	e026      	b.n	80043dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a0:	d007      	beq.n	80043b2 <UART_Receive_IT+0x74>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <UART_Receive_IT+0x82>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e008      	b.n	80043d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4619      	mov	r1, r3
 80043ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d148      	bne.n	8004482 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0220 	bic.w	r2, r2, #32
 80043fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800440e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	2b01      	cmp	r3, #1
 800442e:	d123      	bne.n	8004478 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0210 	bic.w	r2, r2, #16
 8004444:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b10      	cmp	r3, #16
 8004452:	d10a      	bne.n	800446a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff fe79 	bl	8004168 <HAL_UARTEx_RxEventCallback>
 8004476:	e002      	b.n	800447e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7fc f9b3 	bl	80007e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e002      	b.n	8004488 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e000      	b.n	8004488 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044ca:	f023 030c 	bic.w	r3, r3, #12
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a2c      	ldr	r2, [pc, #176]	; (80045a4 <UART_SetConfig+0x114>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d103      	bne.n	8004500 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044f8:	f7fe fc64 	bl	8002dc4 <HAL_RCC_GetPCLK2Freq>
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	e002      	b.n	8004506 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004500:	f7fe fc4c 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8004504:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009a      	lsls	r2, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <UART_SetConfig+0x118>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	0119      	lsls	r1, r3, #4
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009a      	lsls	r2, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	fbb2 f2f3 	udiv	r2, r2, r3
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <UART_SetConfig+0x118>)
 800453e:	fba3 0302 	umull	r0, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2064      	movs	r0, #100	; 0x64
 8004546:	fb00 f303 	mul.w	r3, r0, r3
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	3332      	adds	r3, #50	; 0x32
 8004550:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <UART_SetConfig+0x118>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455c:	4419      	add	r1, r3
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	009a      	lsls	r2, r3, #2
 8004568:	441a      	add	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	fbb2 f2f3 	udiv	r2, r2, r3
 8004574:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <UART_SetConfig+0x118>)
 8004576:	fba3 0302 	umull	r0, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2064      	movs	r0, #100	; 0x64
 800457e:	fb00 f303 	mul.w	r3, r0, r3
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	3332      	adds	r3, #50	; 0x32
 8004588:	4a07      	ldr	r2, [pc, #28]	; (80045a8 <UART_SetConfig+0x118>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	f003 020f 	and.w	r2, r3, #15
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	440a      	add	r2, r1
 800459a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40013800 	.word	0x40013800
 80045a8:	51eb851f 	.word	0x51eb851f

080045ac <__libc_init_array>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	2600      	movs	r6, #0
 80045b0:	4d0c      	ldr	r5, [pc, #48]	; (80045e4 <__libc_init_array+0x38>)
 80045b2:	4c0d      	ldr	r4, [pc, #52]	; (80045e8 <__libc_init_array+0x3c>)
 80045b4:	1b64      	subs	r4, r4, r5
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	42a6      	cmp	r6, r4
 80045ba:	d109      	bne.n	80045d0 <__libc_init_array+0x24>
 80045bc:	f000 f822 	bl	8004604 <_init>
 80045c0:	2600      	movs	r6, #0
 80045c2:	4d0a      	ldr	r5, [pc, #40]	; (80045ec <__libc_init_array+0x40>)
 80045c4:	4c0a      	ldr	r4, [pc, #40]	; (80045f0 <__libc_init_array+0x44>)
 80045c6:	1b64      	subs	r4, r4, r5
 80045c8:	10a4      	asrs	r4, r4, #2
 80045ca:	42a6      	cmp	r6, r4
 80045cc:	d105      	bne.n	80045da <__libc_init_array+0x2e>
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d4:	4798      	blx	r3
 80045d6:	3601      	adds	r6, #1
 80045d8:	e7ee      	b.n	80045b8 <__libc_init_array+0xc>
 80045da:	f855 3b04 	ldr.w	r3, [r5], #4
 80045de:	4798      	blx	r3
 80045e0:	3601      	adds	r6, #1
 80045e2:	e7f2      	b.n	80045ca <__libc_init_array+0x1e>
 80045e4:	080057c4 	.word	0x080057c4
 80045e8:	080057c4 	.word	0x080057c4
 80045ec:	080057c4 	.word	0x080057c4
 80045f0:	080057c8 	.word	0x080057c8

080045f4 <memset>:
 80045f4:	4603      	mov	r3, r0
 80045f6:	4402      	add	r2, r0
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d100      	bne.n	80045fe <memset+0xa>
 80045fc:	4770      	bx	lr
 80045fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004602:	e7f9      	b.n	80045f8 <memset+0x4>

08004604 <_init>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr

08004610 <_fini>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr
