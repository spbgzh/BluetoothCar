
BluetoothCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004538  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a8  08004644  08004644  00014644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ec  080057ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080057ec  080057ec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057ec  080057ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080057f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000010  08005804  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08005804  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e899  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002044  00000000  00000000  0002e8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  000318b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b82  00000000  00000000  000327c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e3d  00000000  00000000  0003434a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf3c  00000000  00000000  00045187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d10c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042cc  00000000  00000000  000d1114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800462c 	.word	0x0800462c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800462c 	.word	0x0800462c

0800014c <SpeedController>:
uint8_t leftDirction = 1;
uint8_t rightDirction = 1;


void SpeedController()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(leftDirction == 1){
 8000150:	4b35      	ldr	r3, [pc, #212]	; (8000228 <SpeedController+0xdc>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d10c      	bne.n	8000172 <SpeedController+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000158:	2200      	movs	r2, #0
 800015a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800015e:	4833      	ldr	r0, [pc, #204]	; (800022c <SpeedController+0xe0>)
 8000160:	f001 fcca 	bl	8001af8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800016a:	4830      	ldr	r0, [pc, #192]	; (800022c <SpeedController+0xe0>)
 800016c:	f001 fcc4 	bl	8001af8 <HAL_GPIO_WritePin>
 8000170:	e01c      	b.n	80001ac <SpeedController+0x60>
	}
	else if(leftDirction == 0){
 8000172:	4b2d      	ldr	r3, [pc, #180]	; (8000228 <SpeedController+0xdc>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d10c      	bne.n	8000194 <SpeedController+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000180:	482a      	ldr	r0, [pc, #168]	; (800022c <SpeedController+0xe0>)
 8000182:	f001 fcb9 	bl	8001af8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018c:	4827      	ldr	r0, [pc, #156]	; (800022c <SpeedController+0xe0>)
 800018e:	f001 fcb3 	bl	8001af8 <HAL_GPIO_WritePin>
 8000192:	e00b      	b.n	80001ac <SpeedController+0x60>
	}
	else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019a:	4824      	ldr	r0, [pc, #144]	; (800022c <SpeedController+0xe0>)
 800019c:	f001 fcac 	bl	8001af8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80001a0:	2200      	movs	r2, #0
 80001a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a6:	4821      	ldr	r0, [pc, #132]	; (800022c <SpeedController+0xe0>)
 80001a8:	f001 fca6 	bl	8001af8 <HAL_GPIO_WritePin>
	}
	if(rightDirction == 1){
 80001ac:	4b20      	ldr	r3, [pc, #128]	; (8000230 <SpeedController+0xe4>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d10c      	bne.n	80001ce <SpeedController+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ba:	481e      	ldr	r0, [pc, #120]	; (8000234 <SpeedController+0xe8>)
 80001bc:	f001 fc9c 	bl	8001af8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80001c0:	2201      	movs	r2, #1
 80001c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001c6:	481b      	ldr	r0, [pc, #108]	; (8000234 <SpeedController+0xe8>)
 80001c8:	f001 fc96 	bl	8001af8 <HAL_GPIO_WritePin>
 80001cc:	e01c      	b.n	8000208 <SpeedController+0xbc>
	}
	else if(rightDirction == 0){
 80001ce:	4b18      	ldr	r3, [pc, #96]	; (8000230 <SpeedController+0xe4>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d10c      	bne.n	80001f0 <SpeedController+0xa4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80001d6:	2201      	movs	r2, #1
 80001d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001dc:	4815      	ldr	r0, [pc, #84]	; (8000234 <SpeedController+0xe8>)
 80001de:	f001 fc8b 	bl	8001af8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e8:	4812      	ldr	r0, [pc, #72]	; (8000234 <SpeedController+0xe8>)
 80001ea:	f001 fc85 	bl	8001af8 <HAL_GPIO_WritePin>
 80001ee:	e00b      	b.n	8000208 <SpeedController+0xbc>
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f6:	480f      	ldr	r0, [pc, #60]	; (8000234 <SpeedController+0xe8>)
 80001f8:	f001 fc7e 	bl	8001af8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000202:	480c      	ldr	r0, [pc, #48]	; (8000234 <SpeedController+0xe8>)
 8000204:	f001 fc78 	bl	8001af8 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, leftSpeed);
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SpeedController+0xec>)
 800020a:	881a      	ldrh	r2, [r3, #0]
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <SpeedController+0xf0>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, rightSpeed);
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <SpeedController+0xf4>)
 8000214:	881a      	ldrh	r2, [r3, #0]
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <SpeedController+0xf8>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	; 0x32
 800021e:	f001 f905 	bl	800142c <HAL_Delay>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000000 	.word	0x20000000
 800022c:	40010800 	.word	0x40010800
 8000230:	20000001 	.word	0x20000001
 8000234:	40010c00 	.word	0x40010c00
 8000238:	20000156 	.word	0x20000156
 800023c:	20000080 	.word	0x20000080
 8000240:	20000158 	.word	0x20000158
 8000244:	200000c8 	.word	0x200000c8

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f001 f88b 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f8b1 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 fa63 	bl	8000720 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800025a:	f000 fa37 	bl	80006cc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800025e:	f000 f8f1 	bl	8000444 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000262:	f000 f9bd 	bl	80005e0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000266:	f000 f91b 	bl	80004a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 800026a:	f000 fc93 	bl	8000b94 <SSD1306_Init>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 800026e:	4b46      	ldr	r3, [pc, #280]	; (8000388 <main+0x140>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	68da      	ldr	r2, [r3, #12]
 8000274:	4b44      	ldr	r3, [pc, #272]	; (8000388 <main+0x140>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f042 0220 	orr.w	r2, r2, #32
 800027c:	60da      	str	r2, [r3, #12]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800027e:	2108      	movs	r1, #8
 8000280:	4842      	ldr	r0, [pc, #264]	; (800038c <main+0x144>)
 8000282:	f002 fe8d 	bl	8002fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000286:	2100      	movs	r1, #0
 8000288:	4841      	ldr	r0, [pc, #260]	; (8000390 <main+0x148>)
 800028a:	f002 fe89 	bl	8002fa0 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000294:	483f      	ldr	r0, [pc, #252]	; (8000394 <main+0x14c>)
 8000296:	f001 fc2f 	bl	8001af8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a0:	483c      	ldr	r0, [pc, #240]	; (8000394 <main+0x14c>)
 80002a2:	f001 fc29 	bl	8001af8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ac:	483a      	ldr	r0, [pc, #232]	; (8000398 <main+0x150>)
 80002ae:	f001 fc23 	bl	8001af8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b8:	4837      	ldr	r0, [pc, #220]	; (8000398 <main+0x150>)
 80002ba:	f001 fc1d 	bl	8001af8 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SpeedController();
 80002be:	f7ff ff45 	bl	800014c <SpeedController>
    /* USER CODE END WHILE */
	  SSD1306_Clear();
 80002c2:	f000 fdcf 	bl	8000e64 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo1,128,40,1);
 80002c6:	2301      	movs	r3, #1
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2328      	movs	r3, #40	; 0x28
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2380      	movs	r3, #128	; 0x80
 80002d0:	4a32      	ldr	r2, [pc, #200]	; (800039c <main+0x154>)
 80002d2:	210f      	movs	r1, #15
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 fbf4 	bl	8000ac2 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80002da:	f000 fd1f 	bl	8000d1c <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 80002de:	f000 fdc1 	bl	8000e64 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo2,128,40,1);
 80002e2:	2301      	movs	r3, #1
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2328      	movs	r3, #40	; 0x28
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2380      	movs	r3, #128	; 0x80
 80002ec:	4a2c      	ldr	r2, [pc, #176]	; (80003a0 <main+0x158>)
 80002ee:	210f      	movs	r1, #15
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 fbe6 	bl	8000ac2 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80002f6:	f000 fd11 	bl	8000d1c <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 80002fa:	f000 fdb3 	bl	8000e64 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo3,128,40,1);
 80002fe:	2301      	movs	r3, #1
 8000300:	9301      	str	r3, [sp, #4]
 8000302:	2328      	movs	r3, #40	; 0x28
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2380      	movs	r3, #128	; 0x80
 8000308:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <main+0x15c>)
 800030a:	210f      	movs	r1, #15
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fbd8 	bl	8000ac2 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000312:	f000 fd03 	bl	8000d1c <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8000316:	f000 fda5 	bl	8000e64 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo4,128,40,1);
 800031a:	2301      	movs	r3, #1
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2328      	movs	r3, #40	; 0x28
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2380      	movs	r3, #128	; 0x80
 8000324:	4a20      	ldr	r2, [pc, #128]	; (80003a8 <main+0x160>)
 8000326:	210f      	movs	r1, #15
 8000328:	2000      	movs	r0, #0
 800032a:	f000 fbca 	bl	8000ac2 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800032e:	f000 fcf5 	bl	8000d1c <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8000332:	f000 fd97 	bl	8000e64 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo5,128,40,1);
 8000336:	2301      	movs	r3, #1
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2328      	movs	r3, #40	; 0x28
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2380      	movs	r3, #128	; 0x80
 8000340:	4a1a      	ldr	r2, [pc, #104]	; (80003ac <main+0x164>)
 8000342:	210f      	movs	r1, #15
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fbbc 	bl	8000ac2 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800034a:	f000 fce7 	bl	8000d1c <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 800034e:	f000 fd89 	bl	8000e64 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo6,128,40,1);
 8000352:	2301      	movs	r3, #1
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	2328      	movs	r3, #40	; 0x28
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <main+0x168>)
 800035e:	210f      	movs	r1, #15
 8000360:	2000      	movs	r0, #0
 8000362:	f000 fbae 	bl	8000ac2 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000366:	f000 fcd9 	bl	8000d1c <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 800036a:	f000 fd7b 	bl	8000e64 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,15,photo7,128,40,1);
 800036e:	2301      	movs	r3, #1
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2328      	movs	r3, #40	; 0x28
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <main+0x16c>)
 800037a:	210f      	movs	r1, #15
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fba0 	bl	8000ac2 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000382:	f000 fccb 	bl	8000d1c <SSD1306_UpdateScreen>
	  SpeedController();
 8000386:	e79a      	b.n	80002be <main+0x76>
 8000388:	20000110 	.word	0x20000110
 800038c:	20000080 	.word	0x20000080
 8000390:	200000c8 	.word	0x200000c8
 8000394:	40010800 	.word	0x40010800
 8000398:	40010c00 	.word	0x40010c00
 800039c:	08004654 	.word	0x08004654
 80003a0:	080048d4 	.word	0x080048d4
 80003a4:	08004b54 	.word	0x08004b54
 80003a8:	08004dd4 	.word	0x08004dd4
 80003ac:	08005054 	.word	0x08005054
 80003b0:	080052d4 	.word	0x080052d4
 80003b4:	08005554 	.word	0x08005554

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b090      	sub	sp, #64	; 0x40
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f004 f928 	bl	800461c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003da:	2301      	movs	r3, #1
 80003dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	2301      	movs	r3, #1
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ec:	2302      	movs	r3, #2
 80003ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fc:	f107 0318 	add.w	r3, r7, #24
 8000400:	4618      	mov	r0, r3
 8000402:	f002 f909 	bl	8002618 <HAL_RCC_OscConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800040c:	f000 fb54 	bl	8000ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000410:	230f      	movs	r3, #15
 8000412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000414:	2302      	movs	r3, #2
 8000416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800041c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2102      	movs	r1, #2
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fb76 	bl	8002b1c <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000436:	f000 fb3f 	bl	8000ab8 <Error_Handler>
  }
}
 800043a:	bf00      	nop
 800043c:	3740      	adds	r7, #64	; 0x40
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_I2C1_Init+0x50>)
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_I2C1_Init+0x54>)
 800044c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_I2C1_Init+0x50>)
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_I2C1_Init+0x58>)
 8000452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_I2C1_Init+0x50>)
 8000462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <MX_I2C1_Init+0x50>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_I2C1_Init+0x50>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <MX_I2C1_Init+0x50>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_I2C1_Init+0x50>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_I2C1_Init+0x50>)
 8000482:	f001 fb51 	bl	8001b28 <HAL_I2C_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800048c:	f000 fb14 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000002c 	.word	0x2000002c
 8000498:	40005400 	.word	0x40005400
 800049c:	00061a80 	.word	0x00061a80

080004a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b096      	sub	sp, #88	; 0x58
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2220      	movs	r2, #32
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f004 f89f 	bl	800461c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004de:	4b3e      	ldr	r3, [pc, #248]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004e0:	4a3e      	ldr	r2, [pc, #248]	; (80005dc <MX_TIM1_Init+0x13c>)
 80004e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80004e4:	4b3c      	ldr	r3, [pc, #240]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004e6:	2247      	movs	r2, #71	; 0x47
 80004e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ea:	4b3b      	ldr	r3, [pc, #236]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80004f0:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004f2:	2264      	movs	r2, #100	; 0x64
 80004f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f6:	4b38      	ldr	r3, [pc, #224]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fc:	4b36      	ldr	r3, [pc, #216]	; (80005d8 <MX_TIM1_Init+0x138>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000508:	4833      	ldr	r0, [pc, #204]	; (80005d8 <MX_TIM1_Init+0x138>)
 800050a:	f002 fca1 	bl	8002e50 <HAL_TIM_Base_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000514:	f000 fad0 	bl	8000ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800051e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000522:	4619      	mov	r1, r3
 8000524:	482c      	ldr	r0, [pc, #176]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000526:	f002 ffa3 	bl	8003470 <HAL_TIM_ConfigClockSource>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000530:	f000 fac2 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000534:	4828      	ldr	r0, [pc, #160]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000536:	f002 fcda 	bl	8002eee <HAL_TIM_PWM_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000540:	f000 faba 	bl	8000ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000544:	2300      	movs	r3, #0
 8000546:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800054c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000550:	4619      	mov	r1, r3
 8000552:	4821      	ldr	r0, [pc, #132]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000554:	f003 fb22 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800055e:	f000 faab 	bl	8000ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000562:	2360      	movs	r3, #96	; 0x60
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800056a:	2300      	movs	r3, #0
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800056e:	2300      	movs	r3, #0
 8000570:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000572:	2304      	movs	r3, #4
 8000574:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000576:	2300      	movs	r3, #0
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800057a:	2300      	movs	r3, #0
 800057c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800057e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000582:	2208      	movs	r2, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4814      	ldr	r0, [pc, #80]	; (80005d8 <MX_TIM1_Init+0x138>)
 8000588:	f002 feb4 	bl	80032f4 <HAL_TIM_PWM_ConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000592:	f000 fa91 	bl	8000ab8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <MX_TIM1_Init+0x138>)
 80005ba:	f003 fb4d 	bl	8003c58 <HAL_TIMEx_ConfigBreakDeadTime>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80005c4:	f000 fa78 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <MX_TIM1_Init+0x138>)
 80005ca:	f000 fda9 	bl	8001120 <HAL_TIM_MspPostInit>

}
 80005ce:	bf00      	nop
 80005d0:	3758      	adds	r7, #88	; 0x58
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000080 	.word	0x20000080
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	; 0x38
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000612:	4a2d      	ldr	r2, [pc, #180]	; (80006c8 <MX_TIM3_Init+0xe8>)
 8000614:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000618:	2247      	movs	r2, #71	; 0x47
 800061a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <MX_TIM3_Init+0xe4>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000624:	2264      	movs	r2, #100	; 0x64
 8000626:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_TIM3_Init+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062e:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000634:	4823      	ldr	r0, [pc, #140]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000636:	f002 fc0b 	bl	8002e50 <HAL_TIM_Base_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000640:	f000 fa3a 	bl	8000ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800064a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064e:	4619      	mov	r1, r3
 8000650:	481c      	ldr	r0, [pc, #112]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000652:	f002 ff0d 	bl	8003470 <HAL_TIM_ConfigClockSource>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800065c:	f000 fa2c 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000660:	4818      	ldr	r0, [pc, #96]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000662:	f002 fc44 	bl	8002eee <HAL_TIM_PWM_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800066c:	f000 fa24 	bl	8000ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4619      	mov	r1, r3
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <MX_TIM3_Init+0xe4>)
 8000680:	f003 fa8c 	bl	8003b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800068a:	f000 fa15 	bl	8000ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800068e:	2360      	movs	r3, #96	; 0x60
 8000690:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800069a:	2304      	movs	r3, #4
 800069c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	4619      	mov	r1, r3
 80006a4:	4807      	ldr	r0, [pc, #28]	; (80006c4 <MX_TIM3_Init+0xe4>)
 80006a6:	f002 fe25 	bl	80032f4 <HAL_TIM_PWM_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80006b0:	f000 fa02 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <MX_TIM3_Init+0xe4>)
 80006b6:	f000 fd33 	bl	8001120 <HAL_TIM_MspPostInit>

}
 80006ba:	bf00      	nop
 80006bc:	3738      	adds	r7, #56	; 0x38
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000c8 	.word	0x200000c8
 80006c8:	40000400 	.word	0x40000400

080006cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART1_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART1_UART_Init+0x4c>)
 8000704:	f003 fb0b 	bl	8003d1e <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f9d3 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000110 	.word	0x20000110
 800071c:	40013800 	.word	0x40013800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a27      	ldr	r2, [pc, #156]	; (80007d8 <MX_GPIO_Init+0xb8>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0320 	and.w	r3, r3, #32
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_GPIO_Init+0xb8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_GPIO_Init+0xb8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <MX_GPIO_Init+0xb8>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_GPIO_Init+0xb8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000782:	4816      	ldr	r0, [pc, #88]	; (80007dc <MX_GPIO_Init+0xbc>)
 8000784:	f001 f9b8 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800078e:	4814      	ldr	r0, [pc, #80]	; (80007e0 <MX_GPIO_Init+0xc0>)
 8000790:	f001 f9b2 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000794:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0xbc>)
 80007ae:	f001 f81f 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_GPIO_Init+0xc0>)
 80007cc:	f001 f810 	bl	80017f0 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	40010800 	.word	0x40010800

080007e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	switch(r){
 80007ec:	4bad      	ldr	r3, [pc, #692]	; (8000aa4 <HAL_UART_RxCpltCallback+0x2c0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	3b41      	subs	r3, #65	; 0x41
 80007f2:	2b13      	cmp	r3, #19
 80007f4:	f200 8144 	bhi.w	8000a80 <HAL_UART_RxCpltCallback+0x29c>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <HAL_UART_RxCpltCallback+0x1c>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	08000851 	.word	0x08000851
 8000804:	0800086f 	.word	0x0800086f
 8000808:	0800088d 	.word	0x0800088d
 800080c:	080008a7 	.word	0x080008a7
 8000810:	080008c5 	.word	0x080008c5
 8000814:	080008e3 	.word	0x080008e3
 8000818:	080008fd 	.word	0x080008fd
 800081c:	0800091b 	.word	0x0800091b
 8000820:	08000937 	.word	0x08000937
 8000824:	08000951 	.word	0x08000951
 8000828:	0800096f 	.word	0x0800096f
 800082c:	0800098b 	.word	0x0800098b
 8000830:	080009a5 	.word	0x080009a5
 8000834:	080009c3 	.word	0x080009c3
 8000838:	080009df 	.word	0x080009df
 800083c:	080009f9 	.word	0x080009f9
 8000840:	08000a17 	.word	0x08000a17
 8000844:	08000a33 	.word	0x08000a33
 8000848:	08000a4d 	.word	0x08000a4d
 800084c:	08000a67 	.word	0x08000a67
		case 'A': {	//3前进
			leftSpeed = fast;
 8000850:	4b95      	ldr	r3, [pc, #596]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000856:	801a      	strh	r2, [r3, #0]
			rightSpeed = fast;
 8000858:	4b94      	ldr	r3, [pc, #592]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 800085a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800085e:	801a      	strh	r2, [r3, #0]
			leftDirction = 1;
 8000860:	4b93      	ldr	r3, [pc, #588]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000866:	4b93      	ldr	r3, [pc, #588]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
			break;
 800086c:	e115      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'B': {	//2前进
			leftSpeed = medium;
 800086e:	4b8e      	ldr	r3, [pc, #568]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000870:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000874:	801a      	strh	r2, [r3, #0]
			rightSpeed = medium;
 8000876:	4b8d      	ldr	r3, [pc, #564]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000878:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800087c:	801a      	strh	r2, [r3, #0]
			leftDirction = 1;
 800087e:	4b8c      	ldr	r3, [pc, #560]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000884:	4b8b      	ldr	r3, [pc, #556]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
			break;
 800088a:	e106      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'C': {	//1前进
			leftSpeed = slow;
 800088c:	4b86      	ldr	r3, [pc, #536]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 800088e:	22c8      	movs	r2, #200	; 0xc8
 8000890:	801a      	strh	r2, [r3, #0]
			rightSpeed = slow;
 8000892:	4b86      	ldr	r3, [pc, #536]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000894:	22c8      	movs	r2, #200	; 0xc8
 8000896:	801a      	strh	r2, [r3, #0]
			leftDirction = 1;
 8000898:	4b85      	ldr	r3, [pc, #532]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 800089e:	4b85      	ldr	r3, [pc, #532]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
			break;
 80008a4:	e0f9      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'D': {	//3后退
			leftSpeed = fast;
 80008a6:	4b80      	ldr	r3, [pc, #512]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 80008a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ac:	801a      	strh	r2, [r3, #0]
			rightSpeed = fast;
 80008ae:	4b7f      	ldr	r3, [pc, #508]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 80008b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008b4:	801a      	strh	r2, [r3, #0]
			leftDirction = 0;
 80008b6:	4b7e      	ldr	r3, [pc, #504]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 80008bc:	4b7d      	ldr	r3, [pc, #500]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
			break;
 80008c2:	e0ea      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'E': {	//2后退
			leftSpeed = medium;
 80008c4:	4b78      	ldr	r3, [pc, #480]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 80008c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008ca:	801a      	strh	r2, [r3, #0]
			rightSpeed = medium;
 80008cc:	4b77      	ldr	r3, [pc, #476]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 80008ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008d2:	801a      	strh	r2, [r3, #0]
			leftDirction = 0;
 80008d4:	4b76      	ldr	r3, [pc, #472]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 80008da:	4b76      	ldr	r3, [pc, #472]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
			break;
 80008e0:	e0db      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'F': {	//1后退
			leftSpeed = slow;
 80008e2:	4b71      	ldr	r3, [pc, #452]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 80008e4:	22c8      	movs	r2, #200	; 0xc8
 80008e6:	801a      	strh	r2, [r3, #0]
			rightSpeed = slow;
 80008e8:	4b70      	ldr	r3, [pc, #448]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 80008ea:	22c8      	movs	r2, #200	; 0xc8
 80008ec:	801a      	strh	r2, [r3, #0]
			leftDirction = 0;
 80008ee:	4b70      	ldr	r3, [pc, #448]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 80008f4:	4b6f      	ldr	r3, [pc, #444]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
			break;
 80008fa:	e0ce      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'G': {	//3左前
			leftSpeed = medium;
 80008fc:	4b6a      	ldr	r3, [pc, #424]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 80008fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000902:	801a      	strh	r2, [r3, #0]
			rightSpeed = fast;
 8000904:	4b69      	ldr	r3, [pc, #420]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800090a:	801a      	strh	r2, [r3, #0]
			leftDirction = 1;
 800090c:	4b68      	ldr	r3, [pc, #416]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000912:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
			break;
 8000918:	e0bf      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
			}
		case 'H': {	//2左前
			leftSpeed = slow;
 800091a:	4b63      	ldr	r3, [pc, #396]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 800091c:	22c8      	movs	r2, #200	; 0xc8
 800091e:	801a      	strh	r2, [r3, #0]
			rightSpeed = medium;
 8000920:	4b62      	ldr	r3, [pc, #392]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000922:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000926:	801a      	strh	r2, [r3, #0]
			leftDirction = 1;
 8000928:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
			break;
 8000934:	e0b1      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'I': {	//1左前
			leftSpeed = stop;
 8000936:	4b5c      	ldr	r3, [pc, #368]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000938:	2200      	movs	r2, #0
 800093a:	801a      	strh	r2, [r3, #0]
			rightSpeed = slow;
 800093c:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 800093e:	22c8      	movs	r2, #200	; 0xc8
 8000940:	801a      	strh	r2, [r3, #0]
			leftDirction = 3;
 8000942:	4b5b      	ldr	r3, [pc, #364]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000944:	2203      	movs	r2, #3
 8000946:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000948:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
			break;
 800094e:	e0a4      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'J': {	//3左后
			leftSpeed = medium;
 8000950:	4b55      	ldr	r3, [pc, #340]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000952:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000956:	801a      	strh	r2, [r3, #0]
			rightSpeed = fast;
 8000958:	4b54      	ldr	r3, [pc, #336]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 800095a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800095e:	801a      	strh	r2, [r3, #0]
			leftDirction = 0;
 8000960:	4b53      	ldr	r3, [pc, #332]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
			break;
 800096c:	e095      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'K': {	//2左后
			leftSpeed = slow;
 800096e:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000970:	22c8      	movs	r2, #200	; 0xc8
 8000972:	801a      	strh	r2, [r3, #0]
			rightSpeed = medium;
 8000974:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000976:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800097a:	801a      	strh	r2, [r3, #0]
			leftDirction = 0;
 800097c:	4b4c      	ldr	r3, [pc, #304]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 8000982:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
			break;
 8000988:	e087      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'L': {	//1左后
			leftSpeed = stop;
 800098a:	4b47      	ldr	r3, [pc, #284]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 800098c:	2200      	movs	r2, #0
 800098e:	801a      	strh	r2, [r3, #0]
			rightSpeed = slow;
 8000990:	4b46      	ldr	r3, [pc, #280]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000992:	22c8      	movs	r2, #200	; 0xc8
 8000994:	801a      	strh	r2, [r3, #0]
			leftDirction = 3;
 8000996:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000998:	2203      	movs	r2, #3
 800099a:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 800099c:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
			break;
 80009a2:	e07a      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'M': {	//3右前
			leftSpeed = fast;
 80009a4:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 80009a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009aa:	801a      	strh	r2, [r3, #0]
			rightSpeed = medium;
 80009ac:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 80009ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009b2:	801a      	strh	r2, [r3, #0]
			leftDirction = 1;
 80009b4:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 80009ba:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
			break;
 80009c0:	e06b      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'N': {	//2右前
			leftSpeed = medium;
 80009c2:	4b39      	ldr	r3, [pc, #228]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 80009c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009c8:	801a      	strh	r2, [r3, #0]
			rightSpeed = slow;
 80009ca:	4b38      	ldr	r3, [pc, #224]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 80009cc:	22c8      	movs	r2, #200	; 0xc8
 80009ce:	801a      	strh	r2, [r3, #0]
			leftDirction = 1;
 80009d0:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
			break;
 80009dc:	e05d      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'O': {	//1右前
			leftSpeed = slow;
 80009de:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 80009e0:	22c8      	movs	r2, #200	; 0xc8
 80009e2:	801a      	strh	r2, [r3, #0]
			rightSpeed = stop;
 80009e4:	4b31      	ldr	r3, [pc, #196]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	801a      	strh	r2, [r3, #0]
			leftDirction = 1;
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
			rightDirction = 3;
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 80009f2:	2203      	movs	r2, #3
 80009f4:	701a      	strb	r2, [r3, #0]
			break;
 80009f6:	e050      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'P': {	//3右后
			leftSpeed = fast;
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 80009fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009fe:	801a      	strh	r2, [r3, #0]
			rightSpeed = medium;
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000a02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a06:	801a      	strh	r2, [r3, #0]
			leftDirction = 0;
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
			break;
 8000a14:	e041      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'Q': {	//2右后
			leftSpeed = medium;
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a1c:	801a      	strh	r2, [r3, #0]
			rightSpeed = slow;
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000a20:	22c8      	movs	r2, #200	; 0xc8
 8000a22:	801a      	strh	r2, [r3, #0]
			leftDirction = 0;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
			break;
 8000a30:	e033      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'R': {	//1右后
			leftSpeed = slow;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a34:	22c8      	movs	r2, #200	; 0xc8
 8000a36:	801a      	strh	r2, [r3, #0]
			rightSpeed = stop;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	801a      	strh	r2, [r3, #0]
			leftDirction = 0;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
			rightDirction = 3;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	701a      	strb	r2, [r3, #0]
			break;
 8000a4a:	e026      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'S': {	//逆时针原地旋转
			leftSpeed = slow;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a4e:	22c8      	movs	r2, #200	; 0xc8
 8000a50:	801a      	strh	r2, [r3, #0]
			rightSpeed = slow;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000a54:	22c8      	movs	r2, #200	; 0xc8
 8000a56:	801a      	strh	r2, [r3, #0]
			leftDirction = 0;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
			rightDirction = 1;
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
			break;
 8000a64:	e019      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		case 'T': {	//顺时针原地旋转
			leftSpeed = slow;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a68:	22c8      	movs	r2, #200	; 0xc8
 8000a6a:	801a      	strh	r2, [r3, #0]
			rightSpeed = slow;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000a6e:	22c8      	movs	r2, #200	; 0xc8
 8000a70:	801a      	strh	r2, [r3, #0]
			leftDirction = 1;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
			rightDirction = 0;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
			break;
 8000a7e:	e00c      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x2b6>
		}
		default : {	//停下
			leftSpeed = stop;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	801a      	strh	r2, [r3, #0]
			rightSpeed = stop;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_UART_RxCpltCallback+0x2c8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	801a      	strh	r2, [r3, #0]
			leftDirction = 3;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a8e:	2203      	movs	r2, #3
 8000a90:	701a      	strb	r2, [r3, #0]
			rightDirction = 3;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a94:	2203      	movs	r2, #3
 8000a96:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	20000154 	.word	0x20000154
 8000aa8:	20000156 	.word	0x20000156
 8000aac:	20000158 	.word	0x20000158
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000001 	.word	0x20000001

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>

08000ac2 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60ba      	str	r2, [r7, #8]
 8000aca:	461a      	mov	r2, r3
 8000acc:	4603      	mov	r3, r0
 8000ace:	81fb      	strh	r3, [r7, #14]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	81bb      	strh	r3, [r7, #12]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000adc:	3307      	adds	r3, #7
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da00      	bge.n	8000ae4 <SSD1306_DrawBitmap+0x22>
 8000ae2:	3307      	adds	r3, #7
 8000ae4:	10db      	asrs	r3, r3, #3
 8000ae6:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	82bb      	strh	r3, [r7, #20]
 8000af0:	e044      	b.n	8000b7c <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	827b      	strh	r3, [r7, #18]
 8000af6:	e02f      	b.n	8000b58 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000af8:	8a7b      	ldrh	r3, [r7, #18]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	75fb      	strb	r3, [r7, #23]
 8000b08:	e012      	b.n	8000b30 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b0e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b12:	fb03 f202 	mul.w	r2, r3, r2
 8000b16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da00      	bge.n	8000b20 <SSD1306_DrawBitmap+0x5e>
 8000b1e:	3307      	adds	r3, #7
 8000b20:	10db      	asrs	r3, r3, #3
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4413      	add	r3, r2
 8000b26:	461a      	mov	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	da09      	bge.n	8000b4c <SSD1306_DrawBitmap+0x8a>
 8000b38:	89fa      	ldrh	r2, [r7, #14]
 8000b3a:	8a7b      	ldrh	r3, [r7, #18]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	89b9      	ldrh	r1, [r7, #12]
 8000b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f92e 	bl	8000da8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000b4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	827b      	strh	r3, [r7, #18]
 8000b58:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbc9      	blt.n	8000af8 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000b64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	82bb      	strh	r3, [r7, #20]
 8000b70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	3301      	adds	r3, #1
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	81bb      	strh	r3, [r7, #12]
 8000b7c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbb4      	blt.n	8000af2 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b9a:	f000 f96d 	bl	8000e78 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b9e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2178      	movs	r1, #120	; 0x78
 8000ba6:	485b      	ldr	r0, [pc, #364]	; (8000d14 <SSD1306_Init+0x180>)
 8000ba8:	f001 fa00 	bl	8001fac <HAL_I2C_IsDeviceReady>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e0a9      	b.n	8000d0a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000bb6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000bba:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bbc:	e002      	b.n	8000bc4 <SSD1306_Init+0x30>
		p--;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f9      	bne.n	8000bbe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bca:	22ae      	movs	r2, #174	; 0xae
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2078      	movs	r0, #120	; 0x78
 8000bd0:	f000 f9cc 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000bd4:	2220      	movs	r2, #32
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2078      	movs	r0, #120	; 0x78
 8000bda:	f000 f9c7 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bde:	2210      	movs	r2, #16
 8000be0:	2100      	movs	r1, #0
 8000be2:	2078      	movs	r0, #120	; 0x78
 8000be4:	f000 f9c2 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000be8:	22b0      	movs	r2, #176	; 0xb0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2078      	movs	r0, #120	; 0x78
 8000bee:	f000 f9bd 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000bf2:	22c8      	movs	r2, #200	; 0xc8
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2078      	movs	r0, #120	; 0x78
 8000bf8:	f000 f9b8 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2078      	movs	r0, #120	; 0x78
 8000c02:	f000 f9b3 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c06:	2210      	movs	r2, #16
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2078      	movs	r0, #120	; 0x78
 8000c0c:	f000 f9ae 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c10:	2240      	movs	r2, #64	; 0x40
 8000c12:	2100      	movs	r1, #0
 8000c14:	2078      	movs	r0, #120	; 0x78
 8000c16:	f000 f9a9 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c1a:	2281      	movs	r2, #129	; 0x81
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2078      	movs	r0, #120	; 0x78
 8000c20:	f000 f9a4 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c24:	22ff      	movs	r2, #255	; 0xff
 8000c26:	2100      	movs	r1, #0
 8000c28:	2078      	movs	r0, #120	; 0x78
 8000c2a:	f000 f99f 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c2e:	22a1      	movs	r2, #161	; 0xa1
 8000c30:	2100      	movs	r1, #0
 8000c32:	2078      	movs	r0, #120	; 0x78
 8000c34:	f000 f99a 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c38:	22a6      	movs	r2, #166	; 0xa6
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2078      	movs	r0, #120	; 0x78
 8000c3e:	f000 f995 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c42:	22a8      	movs	r2, #168	; 0xa8
 8000c44:	2100      	movs	r1, #0
 8000c46:	2078      	movs	r0, #120	; 0x78
 8000c48:	f000 f990 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c4c:	223f      	movs	r2, #63	; 0x3f
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2078      	movs	r0, #120	; 0x78
 8000c52:	f000 f98b 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c56:	22a4      	movs	r2, #164	; 0xa4
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2078      	movs	r0, #120	; 0x78
 8000c5c:	f000 f986 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c60:	22d3      	movs	r2, #211	; 0xd3
 8000c62:	2100      	movs	r1, #0
 8000c64:	2078      	movs	r0, #120	; 0x78
 8000c66:	f000 f981 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2078      	movs	r0, #120	; 0x78
 8000c70:	f000 f97c 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c74:	22d5      	movs	r2, #213	; 0xd5
 8000c76:	2100      	movs	r1, #0
 8000c78:	2078      	movs	r0, #120	; 0x78
 8000c7a:	f000 f977 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c7e:	22f0      	movs	r2, #240	; 0xf0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2078      	movs	r0, #120	; 0x78
 8000c84:	f000 f972 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c88:	22d9      	movs	r2, #217	; 0xd9
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2078      	movs	r0, #120	; 0x78
 8000c8e:	f000 f96d 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c92:	2222      	movs	r2, #34	; 0x22
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	; 0x78
 8000c98:	f000 f968 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c9c:	22da      	movs	r2, #218	; 0xda
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2078      	movs	r0, #120	; 0x78
 8000ca2:	f000 f963 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ca6:	2212      	movs	r2, #18
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	; 0x78
 8000cac:	f000 f95e 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000cb0:	22db      	movs	r2, #219	; 0xdb
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2078      	movs	r0, #120	; 0x78
 8000cb6:	f000 f959 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000cba:	2220      	movs	r2, #32
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	; 0x78
 8000cc0:	f000 f954 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000cc4:	228d      	movs	r2, #141	; 0x8d
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2078      	movs	r0, #120	; 0x78
 8000cca:	f000 f94f 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cce:	2214      	movs	r2, #20
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	; 0x78
 8000cd4:	f000 f94a 	bl	8000f6c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000cd8:	22af      	movs	r2, #175	; 0xaf
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2078      	movs	r0, #120	; 0x78
 8000cde:	f000 f945 	bl	8000f6c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ce2:	222e      	movs	r2, #46	; 0x2e
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	; 0x78
 8000ce8:	f000 f940 	bl	8000f6c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 f843 	bl	8000d78 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000cf2:	f000 f813 	bl	8000d1c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <SSD1306_Init+0x184>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SSD1306_Init+0x184>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SSD1306_Init+0x184>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000002c 	.word	0x2000002c
 8000d18:	2000055c 	.word	0x2000055c

08000d1c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d22:	2300      	movs	r3, #0
 8000d24:	71fb      	strb	r3, [r7, #7]
 8000d26:	e01d      	b.n	8000d64 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	3b50      	subs	r3, #80	; 0x50
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	2078      	movs	r0, #120	; 0x78
 8000d34:	f000 f91a 	bl	8000f6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2078      	movs	r0, #120	; 0x78
 8000d3e:	f000 f915 	bl	8000f6c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d42:	2210      	movs	r2, #16
 8000d44:	2100      	movs	r1, #0
 8000d46:	2078      	movs	r0, #120	; 0x78
 8000d48:	f000 f910 	bl	8000f6c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	01db      	lsls	r3, r3, #7
 8000d50:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <SSD1306_UpdateScreen+0x58>)
 8000d52:	441a      	add	r2, r3
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	2078      	movs	r0, #120	; 0x78
 8000d5a:	f000 f8a1 	bl	8000ea0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	3301      	adds	r3, #1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	d9de      	bls.n	8000d28 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000015c 	.word	0x2000015c

08000d78 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <SSD1306_Fill+0x14>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e000      	b.n	8000d8e <SSD1306_Fill+0x16>
 8000d8c:	23ff      	movs	r3, #255	; 0xff
 8000d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d92:	4619      	mov	r1, r3
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <SSD1306_Fill+0x2c>)
 8000d96:	f003 fc41 	bl	800461c <memset>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000015c 	.word	0x2000015c

08000da8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
 8000db2:	460b      	mov	r3, r1
 8000db4:	80bb      	strh	r3, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	70fb      	strb	r3, [r7, #3]
	if (
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbe:	d848      	bhi.n	8000e52 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	2b3f      	cmp	r3, #63	; 0x3f
 8000dc4:	d845      	bhi.n	8000e52 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <SSD1306_DrawPixel+0xb4>)
 8000dc8:	791b      	ldrb	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d11a      	bne.n	8000e18 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	88bb      	ldrh	r3, [r7, #4]
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	b298      	uxth	r0, r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	01db      	lsls	r3, r3, #7
 8000dee:	4413      	add	r3, r2
 8000df0:	4a1b      	ldr	r2, [pc, #108]	; (8000e60 <SSD1306_DrawPixel+0xb8>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b259      	sxtb	r1, r3
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	01db      	lsls	r3, r3, #7
 8000e0e:	4413      	add	r3, r2
 8000e10:	b2c9      	uxtb	r1, r1
 8000e12:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <SSD1306_DrawPixel+0xb8>)
 8000e14:	54d1      	strb	r1, [r2, r3]
 8000e16:	e01d      	b.n	8000e54 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e18:	88fa      	ldrh	r2, [r7, #6]
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	08db      	lsrs	r3, r3, #3
 8000e1e:	b298      	uxth	r0, r3
 8000e20:	4603      	mov	r3, r0
 8000e22:	01db      	lsls	r3, r3, #7
 8000e24:	4413      	add	r3, r2
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <SSD1306_DrawPixel+0xb8>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	2101      	movs	r1, #1
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	4013      	ands	r3, r2
 8000e40:	b259      	sxtb	r1, r3
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	4603      	mov	r3, r0
 8000e46:	01db      	lsls	r3, r3, #7
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2c9      	uxtb	r1, r1
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <SSD1306_DrawPixel+0xb8>)
 8000e4e:	54d1      	strb	r1, [r2, r3]
 8000e50:	e000      	b.n	8000e54 <SSD1306_DrawPixel+0xac>
		return;
 8000e52:	bf00      	nop
	}
}
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	2000055c 	.word	0x2000055c
 8000e60:	2000015c 	.word	0x2000015c

08000e64 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff ff85 	bl	8000d78 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000e6e:	f7ff ff55 	bl	8000d1c <SSD1306_UpdateScreen>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <ssd1306_I2C_Init+0x24>)
 8000e80:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e82:	e002      	b.n	8000e8a <ssd1306_I2C_Init+0x12>
		p--;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f9      	bne.n	8000e84 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	0003d090 	.word	0x0003d090

08000ea0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b0c7      	sub	sp, #284	; 0x11c
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000eae:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000eb2:	600a      	str	r2, [r1, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ebe:	4622      	mov	r2, r4
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ec6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000eca:	4602      	mov	r2, r0
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ed2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000eda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ee2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ee6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ef4:	e015      	b.n	8000f22 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000ef6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000efa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000efe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	441a      	add	r2, r3
 8000f06:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	7811      	ldrb	r1, [r2, #0]
 8000f0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f12:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f16:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f18:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f2c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000f30:	8812      	ldrh	r2, [r2, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d8df      	bhi.n	8000ef6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f3a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b299      	uxth	r1, r3
 8000f42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	f107 020c 	add.w	r2, r7, #12
 8000f54:	200a      	movs	r0, #10
 8000f56:	9000      	str	r0, [sp, #0]
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <ssd1306_I2C_WriteMulti+0xc8>)
 8000f5a:	f000 ff29 	bl	8001db0 <HAL_I2C_Master_Transmit>
}
 8000f5e:	bf00      	nop
 8000f60:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	2000002c 	.word	0x2000002c

08000f6c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	460b      	mov	r3, r1
 8000f78:	71bb      	strb	r3, [r7, #6]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f82:	797b      	ldrb	r3, [r7, #5]
 8000f84:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	b299      	uxth	r1, r3
 8000f8a:	f107 020c 	add.w	r2, r7, #12
 8000f8e:	230a      	movs	r3, #10
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <ssd1306_I2C_Write+0x38>)
 8000f96:	f000 ff0b 	bl	8001db0 <HAL_I2C_Master_Transmit>
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000002c 	.word	0x2000002c

08000fa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_MspInit+0x5c>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4a14      	ldr	r2, [pc, #80]	; (8001004 <HAL_MspInit+0x5c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6193      	str	r3, [r2, #24]
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_MspInit+0x5c>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_MspInit+0x5c>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_MspInit+0x5c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_MspInit+0x5c>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_MspInit+0x60>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_MspInit+0x60>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000

0800100c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_I2C_MspInit+0x90>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d132      	bne.n	8001092 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_I2C_MspInit+0x94>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <HAL_I2C_MspInit+0x94>)
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_I2C_MspInit+0x94>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001044:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104a:	2312      	movs	r3, #18
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <HAL_I2C_MspInit+0x98>)
 800105a:	f000 fbc9 	bl	80017f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_I2C_MspInit+0x9c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <HAL_I2C_MspInit+0x9c>)
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_I2C_MspInit+0x94>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_I2C_MspInit+0x94>)
 8001080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_I2C_MspInit+0x94>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40005400 	.word	0x40005400
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	40010000 	.word	0x40010000

080010ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_TIM_Base_MspInit+0x68>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d10c      	bne.n	80010d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_TIM_Base_MspInit+0x6c>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <HAL_TIM_Base_MspInit+0x6c>)
 80010c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <HAL_TIM_Base_MspInit+0x6c>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010d6:	e018      	b.n	800110a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_TIM_Base_MspInit+0x70>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d113      	bne.n	800110a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_TIM_Base_MspInit+0x6c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <HAL_TIM_Base_MspInit+0x6c>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_TIM_Base_MspInit+0x6c>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	201d      	movs	r0, #29
 8001100:	f000 fa8f 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001104:	201d      	movs	r0, #29
 8001106:	f000 faa8 	bl	800165a <HAL_NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012c00 	.word	0x40012c00
 8001118:	40021000 	.word	0x40021000
 800111c:	40000400 	.word	0x40000400

08001120 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <HAL_TIM_MspPostInit+0x98>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d119      	bne.n	8001174 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <HAL_TIM_MspPostInit+0x9c>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_TIM_MspPostInit+0x9c>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_TIM_MspPostInit+0x9c>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2302      	movs	r3, #2
 8001164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	4814      	ldr	r0, [pc, #80]	; (80011c0 <HAL_TIM_MspPostInit+0xa0>)
 800116e:	f000 fb3f 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001172:	e01c      	b.n	80011ae <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <HAL_TIM_MspPostInit+0xa4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d117      	bne.n	80011ae <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_TIM_MspPostInit+0x9c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_TIM_MspPostInit+0x9c>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_TIM_MspPostInit+0x9c>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2302      	movs	r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_TIM_MspPostInit+0xa0>)
 80011aa:	f000 fb21 	bl	80017f0 <HAL_GPIO_Init>
}
 80011ae:	bf00      	nop
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010800 	.word	0x40010800
 80011c4:	40000400 	.word	0x40000400

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a26      	ldr	r2, [pc, #152]	; (800127c <HAL_UART_MspInit+0xb4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d145      	bne.n	8001274 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e8:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_UART_MspInit+0xb8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_UART_MspInit+0xb8>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_UART_MspInit+0xb8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_UART_MspInit+0xb8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <HAL_UART_MspInit+0xb8>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_UART_MspInit+0xb8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001218:	2340      	movs	r3, #64	; 0x40
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4816      	ldr	r0, [pc, #88]	; (8001284 <HAL_UART_MspInit+0xbc>)
 800122c:	f000 fae0 	bl	80017f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <HAL_UART_MspInit+0xbc>)
 8001244:	f000 fad4 	bl	80017f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_UART_MspInit+0xc0>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_UART_MspInit+0xc0>)
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	210f      	movs	r1, #15
 8001268:	2025      	movs	r0, #37	; 0x25
 800126a:	f000 f9da 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800126e:	2025      	movs	r0, #37	; 0x25
 8001270:	f000 f9f3 	bl	800165a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40013800 	.word	0x40013800
 8001280:	40021000 	.word	0x40021000
 8001284:	40010c00 	.word	0x40010c00
 8001288:	40010000 	.word	0x40010000

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <NMI_Handler+0x4>

08001292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <MemManage_Handler+0x4>

0800129e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <UsageFault_Handler+0x4>

080012aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d2:	f000 f88f 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <TIM3_IRQHandler+0x10>)
 80012e2:	f001 feff 	bl	80030e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000c8 	.word	0x200000c8

080012f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <USART1_IRQHandler+0x18>)
 80012f6:	f002 fd8f 	bl	8003e18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1,&r,1);
 80012fa:	2201      	movs	r2, #1
 80012fc:	4903      	ldr	r1, [pc, #12]	; (800130c <USART1_IRQHandler+0x1c>)
 80012fe:	4802      	ldr	r0, [pc, #8]	; (8001308 <USART1_IRQHandler+0x18>)
 8001300:	f002 fd5a 	bl	8003db8 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000110 	.word	0x20000110
 800130c:	20000154 	.word	0x20000154

08001310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800131e:	490d      	ldr	r1, [pc, #52]	; (8001354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001334:	4c0a      	ldr	r4, [pc, #40]	; (8001360 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001342:	f7ff ffe5 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f003 f945 	bl	80045d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134a:	f7fe ff7d 	bl	8000248 <main>
  bx lr
 800134e:	4770      	bx	lr
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001358:	080057f4 	.word	0x080057f4
  ldr r2, =_sbss
 800135c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001360:	20000568 	.word	0x20000568

08001364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC1_2_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x28>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x28>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f947 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	200f      	movs	r0, #15
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fe10 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f95f 	bl	8001676 <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d0:	f000 f927 	bl	8001622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000004 	.word	0x20000004
 80013ec:	2000000c 	.word	0x2000000c
 80013f0:	20000008 	.word	0x20000008

080013f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x1c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x20>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x20>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	2000000c 	.word	0x2000000c
 8001414:	20000564 	.word	0x20000564

08001418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <HAL_GetTick+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	20000564 	.word	0x20000564

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff fff0 	bl	8001418 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffe0 	bl	8001418 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000000c 	.word	0x2000000c

08001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4906      	ldr	r1, [pc, #24]	; (800150c <__NVIC_EnableIRQ+0x34>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ec:	f7ff ff90 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff2d 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff42 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff35 	bl	80014d8 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffa2 	bl	80015c8 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d008      	beq.n	80016b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2204      	movs	r2, #4
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e020      	b.n	80016f8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 020e 	bic.w	r2, r2, #14
 80016c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0201 	bic.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	2101      	movs	r1, #1
 80016e0:	fa01 f202 	lsl.w	r2, r1, r2
 80016e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
	...

08001704 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001716:	2b02      	cmp	r3, #2
 8001718:	d005      	beq.n	8001726 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2204      	movs	r2, #4
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e051      	b.n	80017ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 020e 	bic.w	r2, r2, #14
 8001734:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <HAL_DMA_Abort_IT+0xd0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d029      	beq.n	80017a4 <HAL_DMA_Abort_IT+0xa0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <HAL_DMA_Abort_IT+0xd4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d022      	beq.n	80017a0 <HAL_DMA_Abort_IT+0x9c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <HAL_DMA_Abort_IT+0xd8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d01a      	beq.n	800179a <HAL_DMA_Abort_IT+0x96>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <HAL_DMA_Abort_IT+0xdc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d012      	beq.n	8001794 <HAL_DMA_Abort_IT+0x90>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <HAL_DMA_Abort_IT+0xe0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00a      	beq.n	800178e <HAL_DMA_Abort_IT+0x8a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1a      	ldr	r2, [pc, #104]	; (80017e8 <HAL_DMA_Abort_IT+0xe4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d102      	bne.n	8001788 <HAL_DMA_Abort_IT+0x84>
 8001782:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001786:	e00e      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 8001788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800178c:	e00b      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 800178e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001792:	e008      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 8001794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001798:	e005      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	e002      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 80017a0:	2310      	movs	r3, #16
 80017a2:	e000      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 80017a4:	2301      	movs	r3, #1
 80017a6:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_DMA_Abort_IT+0xe8>)
 80017a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
    } 
  }
  return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40020008 	.word	0x40020008
 80017d8:	4002001c 	.word	0x4002001c
 80017dc:	40020030 	.word	0x40020030
 80017e0:	40020044 	.word	0x40020044
 80017e4:	40020058 	.word	0x40020058
 80017e8:	4002006c 	.word	0x4002006c
 80017ec:	40020000 	.word	0x40020000

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001802:	e169      	b.n	8001ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001804:	2201      	movs	r2, #1
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 8158 	bne.w	8001ad2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a9a      	ldr	r2, [pc, #616]	; (8001a90 <HAL_GPIO_Init+0x2a0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d05e      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800182c:	4a98      	ldr	r2, [pc, #608]	; (8001a90 <HAL_GPIO_Init+0x2a0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d875      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001832:	4a98      	ldr	r2, [pc, #608]	; (8001a94 <HAL_GPIO_Init+0x2a4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d058      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001838:	4a96      	ldr	r2, [pc, #600]	; (8001a94 <HAL_GPIO_Init+0x2a4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d86f      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800183e:	4a96      	ldr	r2, [pc, #600]	; (8001a98 <HAL_GPIO_Init+0x2a8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d052      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001844:	4a94      	ldr	r2, [pc, #592]	; (8001a98 <HAL_GPIO_Init+0x2a8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d869      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800184a:	4a94      	ldr	r2, [pc, #592]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d04c      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001850:	4a92      	ldr	r2, [pc, #584]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d863      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001856:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d046      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800185c:	4a90      	ldr	r2, [pc, #576]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d85d      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001862:	2b12      	cmp	r3, #18
 8001864:	d82a      	bhi.n	80018bc <HAL_GPIO_Init+0xcc>
 8001866:	2b12      	cmp	r3, #18
 8001868:	d859      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_GPIO_Init+0x80>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018c5 	.word	0x080018c5
 8001878:	080018d7 	.word	0x080018d7
 800187c:	08001919 	.word	0x08001919
 8001880:	0800191f 	.word	0x0800191f
 8001884:	0800191f 	.word	0x0800191f
 8001888:	0800191f 	.word	0x0800191f
 800188c:	0800191f 	.word	0x0800191f
 8001890:	0800191f 	.word	0x0800191f
 8001894:	0800191f 	.word	0x0800191f
 8001898:	0800191f 	.word	0x0800191f
 800189c:	0800191f 	.word	0x0800191f
 80018a0:	0800191f 	.word	0x0800191f
 80018a4:	0800191f 	.word	0x0800191f
 80018a8:	0800191f 	.word	0x0800191f
 80018ac:	0800191f 	.word	0x0800191f
 80018b0:	0800191f 	.word	0x0800191f
 80018b4:	080018cd 	.word	0x080018cd
 80018b8:	080018e1 	.word	0x080018e1
 80018bc:	4a79      	ldr	r2, [pc, #484]	; (8001aa4 <HAL_GPIO_Init+0x2b4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018c2:	e02c      	b.n	800191e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e029      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	3304      	adds	r3, #4
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e024      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	3308      	adds	r3, #8
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e01f      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	330c      	adds	r3, #12
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e01a      	b.n	8001920 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018f2:	2304      	movs	r3, #4
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e013      	b.n	8001920 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	611a      	str	r2, [r3, #16]
          break;
 800190a:	e009      	b.n	8001920 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190c:	2308      	movs	r3, #8
 800190e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	615a      	str	r2, [r3, #20]
          break;
 8001916:	e003      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x130>
          break;
 800191e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d801      	bhi.n	800192a <HAL_GPIO_Init+0x13a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	e001      	b.n	800192e <HAL_GPIO_Init+0x13e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d802      	bhi.n	800193c <HAL_GPIO_Init+0x14c>
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x152>
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3b08      	subs	r3, #8
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	210f      	movs	r1, #15
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	6a39      	ldr	r1, [r7, #32]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80b1 	beq.w	8001ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001988:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_GPIO_Init+0x2bc>)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a40      	ldr	r2, [pc, #256]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d013      	beq.n	80019dc <HAL_GPIO_Init+0x1ec>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3f      	ldr	r2, [pc, #252]	; (8001ab4 <HAL_GPIO_Init+0x2c4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00d      	beq.n	80019d8 <HAL_GPIO_Init+0x1e8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3e      	ldr	r2, [pc, #248]	; (8001ab8 <HAL_GPIO_Init+0x2c8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d007      	beq.n	80019d4 <HAL_GPIO_Init+0x1e4>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3d      	ldr	r2, [pc, #244]	; (8001abc <HAL_GPIO_Init+0x2cc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d101      	bne.n	80019d0 <HAL_GPIO_Init+0x1e0>
 80019cc:	2303      	movs	r3, #3
 80019ce:	e006      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e004      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019dc:	2300      	movs	r3, #0
 80019de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e0:	f002 0203 	and.w	r2, r2, #3
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	4093      	lsls	r3, r2
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ee:	492f      	ldr	r1, [pc, #188]	; (8001aac <HAL_GPIO_Init+0x2bc>)
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	492c      	ldr	r1, [pc, #176]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4928      	ldr	r1, [pc, #160]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4922      	ldr	r1, [pc, #136]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	491e      	ldr	r1, [pc, #120]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4918      	ldr	r1, [pc, #96]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4914      	ldr	r1, [pc, #80]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d021      	beq.n	8001ac4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e021      	b.n	8001ad2 <HAL_GPIO_Init+0x2e2>
 8001a8e:	bf00      	nop
 8001a90:	10320000 	.word	0x10320000
 8001a94:	10310000 	.word	0x10310000
 8001a98:	10220000 	.word	0x10220000
 8001a9c:	10210000 	.word	0x10210000
 8001aa0:	10120000 	.word	0x10120000
 8001aa4:	10110000 	.word	0x10110000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40010c00 	.word	0x40010c00
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40011400 	.word	0x40011400
 8001ac0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_GPIO_Init+0x304>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4909      	ldr	r1, [pc, #36]	; (8001af4 <HAL_GPIO_Init+0x304>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f ae8e 	bne.w	8001804 <HAL_GPIO_Init+0x14>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	372c      	adds	r7, #44	; 0x2c
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b14:	e003      	b.n	8001b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	041a      	lsls	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	611a      	str	r2, [r3, #16]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e12b      	b.n	8001d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fa5c 	bl	800100c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2224      	movs	r2, #36	; 0x24
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b8c:	f001 f91a 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8001b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a81      	ldr	r2, [pc, #516]	; (8001d9c <HAL_I2C_Init+0x274>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d807      	bhi.n	8001bac <HAL_I2C_Init+0x84>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4a80      	ldr	r2, [pc, #512]	; (8001da0 <HAL_I2C_Init+0x278>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	bf94      	ite	ls
 8001ba4:	2301      	movls	r3, #1
 8001ba6:	2300      	movhi	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	e006      	b.n	8001bba <HAL_I2C_Init+0x92>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a7d      	ldr	r2, [pc, #500]	; (8001da4 <HAL_I2C_Init+0x27c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0e7      	b.n	8001d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4a78      	ldr	r2, [pc, #480]	; (8001da8 <HAL_I2C_Init+0x280>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0c9b      	lsrs	r3, r3, #18
 8001bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a6a      	ldr	r2, [pc, #424]	; (8001d9c <HAL_I2C_Init+0x274>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d802      	bhi.n	8001bfc <HAL_I2C_Init+0xd4>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	e009      	b.n	8001c10 <HAL_I2C_Init+0xe8>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	4a69      	ldr	r2, [pc, #420]	; (8001dac <HAL_I2C_Init+0x284>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	099b      	lsrs	r3, r3, #6
 8001c0e:	3301      	adds	r3, #1
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	495c      	ldr	r1, [pc, #368]	; (8001d9c <HAL_I2C_Init+0x274>)
 8001c2c:	428b      	cmp	r3, r1
 8001c2e:	d819      	bhi.n	8001c64 <HAL_I2C_Init+0x13c>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e59      	subs	r1, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c3e:	1c59      	adds	r1, r3, #1
 8001c40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c44:	400b      	ands	r3, r1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_I2C_Init+0x138>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1e59      	subs	r1, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5e:	e051      	b.n	8001d04 <HAL_I2C_Init+0x1dc>
 8001c60:	2304      	movs	r3, #4
 8001c62:	e04f      	b.n	8001d04 <HAL_I2C_Init+0x1dc>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d111      	bne.n	8001c90 <HAL_I2C_Init+0x168>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e58      	subs	r0, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	440b      	add	r3, r1
 8001c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e012      	b.n	8001cb6 <HAL_I2C_Init+0x18e>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e58      	subs	r0, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	0099      	lsls	r1, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Init+0x196>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e022      	b.n	8001d04 <HAL_I2C_Init+0x1dc>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_I2C_Init+0x1bc>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1e58      	subs	r0, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6859      	ldr	r1, [r3, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	440b      	add	r3, r1
 8001cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce2:	e00f      	b.n	8001d04 <HAL_I2C_Init+0x1dc>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1e58      	subs	r0, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	0099      	lsls	r1, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	6809      	ldr	r1, [r1, #0]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6911      	ldr	r1, [r2, #16]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68d2      	ldr	r2, [r2, #12]
 8001d3e:	4311      	orrs	r1, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	000186a0 	.word	0x000186a0
 8001da0:	001e847f 	.word	0x001e847f
 8001da4:	003d08ff 	.word	0x003d08ff
 8001da8:	431bde83 	.word	0x431bde83
 8001dac:	10624dd3 	.word	0x10624dd3

08001db0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	817b      	strh	r3, [r7, #10]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff fb28 	bl	8001418 <HAL_GetTick>
 8001dc8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	f040 80e0 	bne.w	8001f98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	2319      	movs	r3, #25
 8001dde:	2201      	movs	r2, #1
 8001de0:	4970      	ldr	r1, [pc, #448]	; (8001fa4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 fa92 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001dee:	2302      	movs	r3, #2
 8001df0:	e0d3      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_I2C_Master_Transmit+0x50>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e0cc      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d007      	beq.n	8001e26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2221      	movs	r2, #33	; 0x21
 8001e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2210      	movs	r2, #16
 8001e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	893a      	ldrh	r2, [r7, #8]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e68:	8979      	ldrh	r1, [r7, #10]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	6a3a      	ldr	r2, [r7, #32]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f9ca 	bl	8002208 <I2C_MasterRequestWrite>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e08d      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e94:	e066      	b.n	8001f64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	6a39      	ldr	r1, [r7, #32]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fb0c 	bl	80024b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d107      	bne.n	8001ebe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ebc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e06b      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d11b      	bne.n	8001f38 <HAL_I2C_Master_Transmit+0x188>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d017      	beq.n	8001f38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	6a39      	ldr	r1, [r7, #32]
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fafc 	bl	800253a <I2C_WaitOnBTFFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00d      	beq.n	8001f64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d107      	bne.n	8001f60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e01a      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d194      	bne.n	8001e96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e000      	b.n	8001f9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f98:	2302      	movs	r3, #2
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	00100002 	.word	0x00100002
 8001fa8:	ffff0000 	.word	0xffff0000

08001fac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001fbc:	f7ff fa2c 	bl	8001418 <HAL_GetTick>
 8001fc0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	f040 8111 	bne.w	80021f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2319      	movs	r3, #25
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4988      	ldr	r1, [pc, #544]	; (8002200 <HAL_I2C_IsDeviceReady+0x254>)
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f994 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
 8001fec:	e104      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2C_IsDeviceReady+0x50>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0fd      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x24c>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d007      	beq.n	8002022 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0201 	orr.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2224      	movs	r2, #36	; 0x24
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4a70      	ldr	r2, [pc, #448]	; (8002204 <HAL_I2C_IsDeviceReady+0x258>)
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002054:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f952 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00d      	beq.n	800208a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207c:	d103      	bne.n	8002086 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0b6      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002098:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800209a:	f7ff f9bd 	bl	8001418 <HAL_GetTick>
 800209e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	bf0c      	ite	eq
 80020ae:	2301      	moveq	r3, #1
 80020b0:	2300      	movne	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c4:	bf0c      	ite	eq
 80020c6:	2301      	moveq	r3, #1
 80020c8:	2300      	movne	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020ce:	e025      	b.n	800211c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020d0:	f7ff f9a2 	bl	8001418 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d302      	bcc.n	80020e6 <HAL_I2C_IsDeviceReady+0x13a>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	22a0      	movs	r2, #160	; 0xa0
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2ba0      	cmp	r3, #160	; 0xa0
 8002126:	d005      	beq.n	8002134 <HAL_I2C_IsDeviceReady+0x188>
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_I2C_IsDeviceReady+0x188>
 800212e:	7dbb      	ldrb	r3, [r7, #22]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0cd      	beq.n	80020d0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b02      	cmp	r3, #2
 8002148:	d129      	bne.n	800219e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002158:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	2319      	movs	r3, #25
 8002176:	2201      	movs	r2, #1
 8002178:	4921      	ldr	r1, [pc, #132]	; (8002200 <HAL_I2C_IsDeviceReady+0x254>)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f8c6 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e036      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e02c      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2319      	movs	r3, #25
 80021be:	2201      	movs	r2, #1
 80021c0:	490f      	ldr	r1, [pc, #60]	; (8002200 <HAL_I2C_IsDeviceReady+0x254>)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f8a2 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e012      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	f4ff af32 	bcc.w	8002046 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
  }
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	00100002 	.word	0x00100002
 8002204:	ffff0000 	.word	0xffff0000

08002208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	460b      	mov	r3, r1
 8002216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d006      	beq.n	8002232 <I2C_MasterRequestWrite+0x2a>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d003      	beq.n	8002232 <I2C_MasterRequestWrite+0x2a>
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002230:	d108      	bne.n	8002244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e00b      	b.n	800225c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	2b12      	cmp	r3, #18
 800224a:	d107      	bne.n	800225c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800225a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f84f 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00d      	beq.n	8002290 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002282:	d103      	bne.n	800228c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e035      	b.n	80022fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002298:	d108      	bne.n	80022ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a8:	611a      	str	r2, [r3, #16]
 80022aa:	e01b      	b.n	80022e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022ac:	897b      	ldrh	r3, [r7, #10]
 80022ae:	11db      	asrs	r3, r3, #7
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f003 0306 	and.w	r3, r3, #6
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f063 030f 	orn	r3, r3, #15
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <I2C_MasterRequestWrite+0xfc>)
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f875 	bl	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e010      	b.n	80022fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022da:	897b      	ldrh	r3, [r7, #10]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4907      	ldr	r1, [pc, #28]	; (8002308 <I2C_MasterRequestWrite+0x100>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f865 	bl	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	00010008 	.word	0x00010008
 8002308:	00010002 	.word	0x00010002

0800230c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800231c:	e025      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002324:	d021      	beq.n	800236a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7ff f877 	bl	8001418 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d116      	bne.n	800236a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e023      	b.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10d      	bne.n	8002390 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf0c      	ite	eq
 8002386:	2301      	moveq	r3, #1
 8002388:	2300      	movne	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	e00c      	b.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4013      	ands	r3, r2
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf0c      	ite	eq
 80023a2:	2301      	moveq	r3, #1
 80023a4:	2300      	movne	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d0b6      	beq.n	800231e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023c8:	e051      	b.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d8:	d123      	bne.n	8002422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f043 0204 	orr.w	r2, r3, #4
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e046      	b.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d021      	beq.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe fff5 	bl	8001418 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e020      	b.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10c      	bne.n	8002492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4013      	ands	r3, r2
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e00b      	b.n	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	43da      	mvns	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d18d      	bne.n	80023ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c4:	e02d      	b.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f878 	bl	80025bc <I2C_IsAcknowledgeFailed>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e02d      	b.n	8002532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024dc:	d021      	beq.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024de:	f7fe ff9b 	bl	8001418 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d302      	bcc.n	80024f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d116      	bne.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e007      	b.n	8002532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d1ca      	bne.n	80024c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002546:	e02d      	b.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f837 	bl	80025bc <I2C_IsAcknowledgeFailed>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e02d      	b.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800255e:	d021      	beq.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002560:	f7fe ff5a 	bl	8001418 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	d302      	bcc.n	8002576 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d116      	bne.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e007      	b.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d1ca      	bne.n	8002548 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d11b      	bne.n	800260c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f043 0204 	orr.w	r2, r3, #4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e272      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8087 	beq.w	8002746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002638:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b04      	cmp	r3, #4
 8002642:	d00c      	beq.n	800265e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002644:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d112      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
 8002650:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d10b      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d06c      	beq.n	8002744 <HAL_RCC_OscConfig+0x12c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d168      	bne.n	8002744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e24c      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x76>
 8002680:	4b80      	ldr	r3, [pc, #512]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a7f      	ldr	r2, [pc, #508]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e02e      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b7b      	ldr	r3, [pc, #492]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7a      	ldr	r2, [pc, #488]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b78      	ldr	r3, [pc, #480]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a77      	ldr	r2, [pc, #476]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0xbc>
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a71      	ldr	r2, [pc, #452]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a67      	ldr	r2, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fe90 	bl	8001418 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fe8c 	bl	8001418 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e200      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xe4>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe fe7c 	bl	8001418 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fe78 	bl	8001418 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1ec      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x10c>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800275e:	4b49      	ldr	r3, [pc, #292]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
 800276a:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1c0      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4939      	ldr	r1, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe fe31 	bl	8001418 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fe fe2d 	bl	8001418 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1a1      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4927      	ldr	r1, [pc, #156]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fe10 	bl	8001418 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7fe fe0c 	bl	8001418 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e180      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03a      	beq.n	800289c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7fe fdf0 	bl	8001418 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7fe fdec 	bl	8001418 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e160      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800285a:	2001      	movs	r0, #1
 800285c:	f000 fada 	bl	8002e14 <RCC_Delay>
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fe fdd6 	bl	8001418 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286e:	e00f      	b.n	8002890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe fdd2 	bl	8001418 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d908      	bls.n	8002890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e146      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	42420000 	.word	0x42420000
 800288c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	4b92      	ldr	r3, [pc, #584]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e9      	bne.n	8002870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a6 	beq.w	80029f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a87      	ldr	r2, [pc, #540]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]
 80028c6:	4b85      	ldr	r3, [pc, #532]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b7f      	ldr	r3, [pc, #508]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7e      	ldr	r2, [pc, #504]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fd93 	bl	8001418 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe fd8f 	bl	8001418 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e103      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x312>
 800291c:	4b6f      	ldr	r3, [pc, #444]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	e02d      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x334>
 8002932:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a69      	ldr	r2, [pc, #420]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a66      	ldr	r2, [pc, #408]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	e01c      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d10c      	bne.n	800296e <HAL_RCC_OscConfig+0x356>
 8002954:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a60      	ldr	r2, [pc, #384]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6213      	str	r3, [r2, #32]
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a5d      	ldr	r2, [pc, #372]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800296e:	4b5b      	ldr	r3, [pc, #364]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a5a      	ldr	r2, [pc, #360]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d015      	beq.n	80029ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fe fd43 	bl	8001418 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe fd3f 	bl	8001418 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0b1      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ee      	beq.n	8002996 <HAL_RCC_OscConfig+0x37e>
 80029b8:	e014      	b.n	80029e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fd2d 	bl	8001418 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe fd29 	bl	8001418 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e09b      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d8:	4b40      	ldr	r3, [pc, #256]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a3b      	ldr	r2, [pc, #236]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8087 	beq.w	8002b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d061      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d146      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fcfd 	bl	8001418 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe fcf9 	bl	8001418 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e06d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d108      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4921      	ldr	r1, [pc, #132]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a19      	ldr	r1, [r3, #32]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	491b      	ldr	r1, [pc, #108]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fccd 	bl	8001418 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fe fcc9 	bl	8001418 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e03d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x46a>
 8002aa0:	e035      	b.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fcb6 	bl	8001418 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fcb2 	bl	8001418 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e026      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x498>
 8002ace:	e01e      	b.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e019      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_OscConfig+0x500>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0d0      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d910      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4965      	ldr	r1, [pc, #404]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d040      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e073      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06b      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4936      	ldr	r1, [pc, #216]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fc04 	bl	8001418 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fe fc00 	bl	8001418 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e053      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d210      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fb62 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080057d4 	.word	0x080057d4
 8002ce8:	20000004 	.word	0x20000004
 8002cec:	20000008 	.word	0x20000008

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b490      	push	{r4, r7}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cf6:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xac>)
 8002cf8:	1d3c      	adds	r4, r7, #4
 8002cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d00:	f240 2301 	movw	r3, #513	; 0x201
 8002d04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x40>
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x46>
 8002d2e:	e02b      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d32:	623b      	str	r3, [r7, #32]
      break;
 8002d34:	e02b      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	0c9b      	lsrs	r3, r3, #18
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3328      	adds	r3, #40	; 0x28
 8002d40:	443b      	add	r3, r7
 8002d42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d52:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0c5b      	lsrs	r3, r3, #17
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	3328      	adds	r3, #40	; 0x28
 8002d5e:	443b      	add	r3, r7
 8002d60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d6a:	fb03 f202 	mul.w	r2, r3, r2
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	e004      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	623b      	str	r3, [r7, #32]
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d8a:	623b      	str	r3, [r7, #32]
      break;
 8002d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3728      	adds	r7, #40	; 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc90      	pop	{r4, r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	08004644 	.word	0x08004644
 8002da0:	40021000 	.word	0x40021000
 8002da4:	00b71b00 	.word	0x00b71b00
 8002da8:	003d0900 	.word	0x003d0900
 8002dac:	007a1200 	.word	0x007a1200

08002db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc8:	f7ff fff2 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000
 8002de8:	080057e4 	.word	0x080057e4

08002dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df0:	f7ff ffde 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0adb      	lsrs	r3, r3, #11
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	080057e4 	.word	0x080057e4

08002e14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <RCC_Delay+0x34>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <RCC_Delay+0x38>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0a5b      	lsrs	r3, r3, #9
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e30:	bf00      	nop
  }
  while (Delay --);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	60fa      	str	r2, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f9      	bne.n	8002e30 <RCC_Delay+0x1c>
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	10624dd3 	.word	0x10624dd3

08002e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e041      	b.n	8002ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe f918 	bl	80010ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f000 fbe0 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e041      	b.n	8002f84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f839 	bl	8002f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f000 fb91 	bl	8003654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_TIM_PWM_Start+0x24>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e022      	b.n	800300a <HAL_TIM_PWM_Start+0x6a>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d109      	bne.n	8002fde <HAL_TIM_PWM_Start+0x3e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	bf14      	ite	ne
 8002fd6:	2301      	movne	r3, #1
 8002fd8:	2300      	moveq	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	e015      	b.n	800300a <HAL_TIM_PWM_Start+0x6a>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d109      	bne.n	8002ff8 <HAL_TIM_PWM_Start+0x58>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e008      	b.n	800300a <HAL_TIM_PWM_Start+0x6a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e05e      	b.n	80030d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <HAL_TIM_PWM_Start+0x82>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003020:	e013      	b.n	800304a <HAL_TIM_PWM_Start+0xaa>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b04      	cmp	r3, #4
 8003026:	d104      	bne.n	8003032 <HAL_TIM_PWM_Start+0x92>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003030:	e00b      	b.n	800304a <HAL_TIM_PWM_Start+0xaa>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d104      	bne.n	8003042 <HAL_TIM_PWM_Start+0xa2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003040:	e003      	b.n	800304a <HAL_TIM_PWM_Start+0xaa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2201      	movs	r2, #1
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fd7e 	bl	8003b54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1e      	ldr	r2, [pc, #120]	; (80030d8 <HAL_TIM_PWM_Start+0x138>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d107      	bne.n	8003072 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_TIM_PWM_Start+0x138>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_TIM_PWM_Start+0xfa>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d009      	beq.n	800309a <HAL_TIM_PWM_Start+0xfa>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a14      	ldr	r2, [pc, #80]	; (80030dc <HAL_TIM_PWM_Start+0x13c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_PWM_Start+0xfa>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_TIM_PWM_Start+0x140>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d010      	beq.n	80030ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	e007      	b.n	80030ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40012c00 	.word	0x40012c00
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800

080030e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0202 	mvn.w	r2, #2
 8003110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa78 	bl	800361c <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa6b 	bl	800360a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa7a 	bl	800362e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0204 	mvn.w	r2, #4
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa4e 	bl	800361c <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa41 	bl	800360a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fa50 	bl	800362e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d122      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d11b      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0208 	mvn.w	r2, #8
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2204      	movs	r2, #4
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa24 	bl	800361c <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa17 	bl	800360a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fa26 	bl	800362e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b10      	cmp	r3, #16
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0210 	mvn.w	r2, #16
 800320c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2208      	movs	r2, #8
 8003212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9fa 	bl	800361c <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f9ed 	bl	800360a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f9fc 	bl	800362e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0201 	mvn.w	r2, #1
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f9c8 	bl	80035f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d10e      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b80      	cmp	r3, #128	; 0x80
 8003282:	d107      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fd3c 	bl	8003d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d10e      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d107      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9c0 	bl	8003640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d10e      	bne.n	80032ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d107      	bne.n	80032ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0220 	mvn.w	r2, #32
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fd07 	bl	8003cfa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800330a:	2302      	movs	r3, #2
 800330c:	e0ac      	b.n	8003468 <HAL_TIM_PWM_ConfigChannel+0x174>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	f200 809f 	bhi.w	800345c <HAL_TIM_PWM_ConfigChannel+0x168>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	08003359 	.word	0x08003359
 8003328:	0800345d 	.word	0x0800345d
 800332c:	0800345d 	.word	0x0800345d
 8003330:	0800345d 	.word	0x0800345d
 8003334:	08003399 	.word	0x08003399
 8003338:	0800345d 	.word	0x0800345d
 800333c:	0800345d 	.word	0x0800345d
 8003340:	0800345d 	.word	0x0800345d
 8003344:	080033db 	.word	0x080033db
 8003348:	0800345d 	.word	0x0800345d
 800334c:	0800345d 	.word	0x0800345d
 8003350:	0800345d 	.word	0x0800345d
 8003354:	0800341b 	.word	0x0800341b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f9da 	bl	8003718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0208 	orr.w	r2, r2, #8
 8003372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6999      	ldr	r1, [r3, #24]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	619a      	str	r2, [r3, #24]
      break;
 8003396:	e062      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fa20 	bl	80037e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	021a      	lsls	r2, r3, #8
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	619a      	str	r2, [r3, #24]
      break;
 80033d8:	e041      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fa69 	bl	80038b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69da      	ldr	r2, [r3, #28]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0208 	orr.w	r2, r2, #8
 80033f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0204 	bic.w	r2, r2, #4
 8003404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69d9      	ldr	r1, [r3, #28]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	61da      	str	r2, [r3, #28]
      break;
 8003418:	e021      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fab3 	bl	800398c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	61da      	str	r2, [r3, #28]
      break;
 800345a:	e000      	b.n	800345e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800345c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_TIM_ConfigClockSource+0x18>
 8003484:	2302      	movs	r3, #2
 8003486:	e0b3      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x180>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c0:	d03e      	beq.n	8003540 <HAL_TIM_ConfigClockSource+0xd0>
 80034c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c6:	f200 8087 	bhi.w	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	f000 8085 	beq.w	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d6:	d87f      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034d8:	2b70      	cmp	r3, #112	; 0x70
 80034da:	d01a      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0xa2>
 80034dc:	2b70      	cmp	r3, #112	; 0x70
 80034de:	d87b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034e0:	2b60      	cmp	r3, #96	; 0x60
 80034e2:	d050      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0x116>
 80034e4:	2b60      	cmp	r3, #96	; 0x60
 80034e6:	d877      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034e8:	2b50      	cmp	r3, #80	; 0x50
 80034ea:	d03c      	beq.n	8003566 <HAL_TIM_ConfigClockSource+0xf6>
 80034ec:	2b50      	cmp	r3, #80	; 0x50
 80034ee:	d873      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d058      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x136>
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d86f      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 80034f8:	2b30      	cmp	r3, #48	; 0x30
 80034fa:	d064      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x156>
 80034fc:	2b30      	cmp	r3, #48	; 0x30
 80034fe:	d86b      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d060      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x156>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d867      	bhi.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d05c      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x156>
 800350c:	2b10      	cmp	r3, #16
 800350e:	d05a      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003510:	e062      	b.n	80035d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f000 faf8 	bl	8003b16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003534:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	609a      	str	r2, [r3, #8]
      break;
 800353e:	e04e      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6899      	ldr	r1, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f000 fae1 	bl	8003b16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003562:	609a      	str	r2, [r3, #8]
      break;
 8003564:	e03b      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	461a      	mov	r2, r3
 8003574:	f000 fa58 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2150      	movs	r1, #80	; 0x50
 800357e:	4618      	mov	r0, r3
 8003580:	f000 faaf 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 8003584:	e02b      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	461a      	mov	r2, r3
 8003594:	f000 fa76 	bl	8003a84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2160      	movs	r1, #96	; 0x60
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa9f 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 80035a4:	e01b      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fa38 	bl	8003a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2140      	movs	r1, #64	; 0x40
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fa8f 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 80035c4:	e00b      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f000 fa86 	bl	8003ae2 <TIM_ITRx_SetConfig>
        break;
 80035d6:	e002      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a29      	ldr	r2, [pc, #164]	; (800370c <TIM_Base_SetConfig+0xb8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00b      	beq.n	8003684 <TIM_Base_SetConfig+0x30>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d007      	beq.n	8003684 <TIM_Base_SetConfig+0x30>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a26      	ldr	r2, [pc, #152]	; (8003710 <TIM_Base_SetConfig+0xbc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_Base_SetConfig+0x30>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a25      	ldr	r2, [pc, #148]	; (8003714 <TIM_Base_SetConfig+0xc0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d108      	bne.n	8003696 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <TIM_Base_SetConfig+0xb8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00b      	beq.n	80036b6 <TIM_Base_SetConfig+0x62>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d007      	beq.n	80036b6 <TIM_Base_SetConfig+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <TIM_Base_SetConfig+0xbc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_Base_SetConfig+0x62>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a18      	ldr	r2, [pc, #96]	; (8003714 <TIM_Base_SetConfig+0xc0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d108      	bne.n	80036c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a07      	ldr	r2, [pc, #28]	; (800370c <TIM_Base_SetConfig+0xb8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d103      	bne.n	80036fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	615a      	str	r2, [r3, #20]
}
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f023 0201 	bic.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 0302 	bic.w	r3, r3, #2
 8003760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <TIM_OC1_SetConfig+0xc8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d10c      	bne.n	800378e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0308 	bic.w	r3, r3, #8
 800377a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <TIM_OC1_SetConfig+0xc8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d111      	bne.n	80037ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800379c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40012c00 	.word	0x40012c00

080037e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <TIM_OC2_SetConfig+0xd0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d10d      	bne.n	8003860 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800384a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800385e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <TIM_OC2_SetConfig+0xd0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d113      	bne.n	8003890 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800386e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40012c00 	.word	0x40012c00

080038b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <TIM_OC3_SetConfig+0xd0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d10d      	bne.n	8003932 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800391c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <TIM_OC3_SetConfig+0xd0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d113      	bne.n	8003962 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00

0800398c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	031b      	lsls	r3, r3, #12
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <TIM_OC4_SetConfig+0x98>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d109      	bne.n	8003a00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00

08003a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 030a 	bic.w	r3, r3, #10
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f023 0210 	bic.w	r2, r3, #16
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	031b      	lsls	r3, r3, #12
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	621a      	str	r2, [r3, #32]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f043 0307 	orr.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	021a      	lsls	r2, r3, #8
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	609a      	str	r2, [r3, #8]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2201      	movs	r2, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1a      	ldr	r2, [r3, #32]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	401a      	ands	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e046      	b.n	8003c42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00e      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d009      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d004      	beq.n	8003c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10c      	bne.n	8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800

08003c58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e03d      	b.n	8003cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e03f      	b.n	8003db0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fd fa3f 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2224      	movs	r2, #36	; 0x24
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d60:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fba8 	bl	80044b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d86:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d96:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d11d      	bne.n	8003e0e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <HAL_UART_Receive_IT+0x26>
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e016      	b.n	8003e10 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_UART_Receive_IT+0x38>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e00f      	b.n	8003e10 <HAL_UART_Receive_IT+0x58>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	461a      	mov	r2, r3
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f9ce 	bl	80041a6 <UART_Start_Receive_IT>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	e000      	b.n	8003e10 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e0e:	2302      	movs	r3, #2
  }
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10d      	bne.n	8003e6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_UART_IRQHandler+0x52>
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa7f 	bl	8004366 <UART_Receive_IT>
      return;
 8003e68:	e17b      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80b1 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x1bc>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_UART_IRQHandler+0x70>
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80a6 	beq.w	8003fd4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x90>
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xb0>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f043 0202 	orr.w	r2, r3, #2
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_UART_IRQHandler+0xd0>
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00f      	beq.n	8003f12 <HAL_UART_IRQHandler+0xfa>
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <HAL_UART_IRQHandler+0xee>
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0208 	orr.w	r2, r3, #8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 811e 	beq.w	8004158 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_UART_IRQHandler+0x11e>
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fa18 	bl	8004366 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_UART_IRQHandler+0x146>
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d031      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f95a 	bl	8004218 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d023      	beq.n	8003fba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d013      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	4a76      	ldr	r2, [pc, #472]	; (8004168 <HAL_UART_IRQHandler+0x350>)
 8003f90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fbb4 	bl	8001704 <HAL_DMA_Abort_IT>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fac:	4610      	mov	r0, r2
 8003fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e00e      	b.n	8003fd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8e3 	bl	800417e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	e00a      	b.n	8003fd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f8df 	bl	800417e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	e006      	b.n	8003fd0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8db 	bl	800417e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fce:	e0c3      	b.n	8004158 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	bf00      	nop
    return;
 8003fd2:	e0c1      	b.n	8004158 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f040 80a1 	bne.w	8004120 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 809b 	beq.w	8004120 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8095 	beq.w	8004120 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d04e      	beq.n	80040b8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004024:	8a3b      	ldrh	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 8098 	beq.w	800415c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004030:	8a3a      	ldrh	r2, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	f080 8092 	bcs.w	800415c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8a3a      	ldrh	r2, [r7, #16]
 800403c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b20      	cmp	r3, #32
 8004046:	d02b      	beq.n	80040a0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004056:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004076:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0210 	bic.w	r2, r2, #16
 8004094:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	4618      	mov	r0, r3
 800409c:	f7fd faf7 	bl	800168e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	4619      	mov	r1, r3
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f86d 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040b6:	e051      	b.n	800415c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d047      	beq.n	8004160 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040d0:	8a7b      	ldrh	r3, [r7, #18]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d044      	beq.n	8004160 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0210 	bic.w	r2, r2, #16
 8004112:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004114:	8a7b      	ldrh	r3, [r7, #18]
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f839 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800411e:	e01f      	b.n	8004160 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_UART_IRQHandler+0x324>
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8af 	bl	8004298 <UART_Transmit_IT>
    return;
 800413a:	e012      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <HAL_UART_IRQHandler+0x34a>
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8f0 	bl	8004336 <UART_EndTransmit_IT>
    return;
 8004156:	e004      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
    return;
 8004158:	bf00      	nop
 800415a:	e002      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
      return;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <HAL_UART_IRQHandler+0x34a>
      return;
 8004160:	bf00      	nop
  }
}
 8004162:	3728      	adds	r7, #40	; 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	08004271 	.word	0x08004271

0800416c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	4613      	mov	r3, r2
 80041b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88fa      	ldrh	r2, [r7, #6]
 80041be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2222      	movs	r2, #34	; 0x22
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ea:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0220 	orr.w	r2, r2, #32
 800420a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800422e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0210 	bic.w	r2, r2, #16
 8004256:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff ff77 	bl	800417e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b21      	cmp	r3, #33	; 0x21
 80042aa:	d13e      	bne.n	800432a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d114      	bne.n	80042e0 <UART_Transmit_IT+0x48>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d110      	bne.n	80042e0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	621a      	str	r2, [r3, #32]
 80042de:	e008      	b.n	80042f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	1c59      	adds	r1, r3, #1
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6211      	str	r1, [r2, #32]
 80042ea:	781a      	ldrb	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4619      	mov	r1, r3
 8004300:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10f      	bne.n	8004326 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004314:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004324:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e000      	b.n	800432c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
  }
}
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800434c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff ff08 	bl	800416c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b22      	cmp	r3, #34	; 0x22
 8004378:	f040 8099 	bne.w	80044ae <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004384:	d117      	bne.n	80043b6 <UART_Receive_IT+0x50>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d113      	bne.n	80043b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
 80043b4:	e026      	b.n	8004404 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d007      	beq.n	80043da <UART_Receive_IT+0x74>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10a      	bne.n	80043e8 <UART_Receive_IT+0x82>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e008      	b.n	80043fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29b      	uxth	r3, r3
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4619      	mov	r1, r3
 8004412:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004414:	2b00      	cmp	r3, #0
 8004416:	d148      	bne.n	80044aa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0220 	bic.w	r2, r2, #32
 8004426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	2b01      	cmp	r3, #1
 8004456:	d123      	bne.n	80044a0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0210 	bic.w	r2, r2, #16
 800446c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b10      	cmp	r3, #16
 800447a:	d10a      	bne.n	8004492 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fe79 	bl	8004190 <HAL_UARTEx_RxEventCallback>
 800449e:	e002      	b.n	80044a6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc f99f 	bl	80007e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e002      	b.n	80044b0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044f2:	f023 030c 	bic.w	r3, r3, #12
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <UART_SetConfig+0x114>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7fe fc64 	bl	8002dec <HAL_RCC_GetPCLK2Freq>
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	e002      	b.n	800452e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7fe fc4c 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 800452c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009a      	lsls	r2, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	4a22      	ldr	r2, [pc, #136]	; (80045d0 <UART_SetConfig+0x118>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	0119      	lsls	r1, r3, #4
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009a      	lsls	r2, r3, #2
 8004558:	441a      	add	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	fbb2 f2f3 	udiv	r2, r2, r3
 8004564:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <UART_SetConfig+0x118>)
 8004566:	fba3 0302 	umull	r0, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2064      	movs	r0, #100	; 0x64
 800456e:	fb00 f303 	mul.w	r3, r0, r3
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	3332      	adds	r3, #50	; 0x32
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <UART_SetConfig+0x118>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004584:	4419      	add	r1, r3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009a      	lsls	r2, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	fbb2 f2f3 	udiv	r2, r2, r3
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <UART_SetConfig+0x118>)
 800459e:	fba3 0302 	umull	r0, r3, r3, r2
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2064      	movs	r0, #100	; 0x64
 80045a6:	fb00 f303 	mul.w	r3, r0, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	3332      	adds	r3, #50	; 0x32
 80045b0:	4a07      	ldr	r2, [pc, #28]	; (80045d0 <UART_SetConfig+0x118>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	f003 020f 	and.w	r2, r3, #15
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	440a      	add	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40013800 	.word	0x40013800
 80045d0:	51eb851f 	.word	0x51eb851f

080045d4 <__libc_init_array>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	2600      	movs	r6, #0
 80045d8:	4d0c      	ldr	r5, [pc, #48]	; (800460c <__libc_init_array+0x38>)
 80045da:	4c0d      	ldr	r4, [pc, #52]	; (8004610 <__libc_init_array+0x3c>)
 80045dc:	1b64      	subs	r4, r4, r5
 80045de:	10a4      	asrs	r4, r4, #2
 80045e0:	42a6      	cmp	r6, r4
 80045e2:	d109      	bne.n	80045f8 <__libc_init_array+0x24>
 80045e4:	f000 f822 	bl	800462c <_init>
 80045e8:	2600      	movs	r6, #0
 80045ea:	4d0a      	ldr	r5, [pc, #40]	; (8004614 <__libc_init_array+0x40>)
 80045ec:	4c0a      	ldr	r4, [pc, #40]	; (8004618 <__libc_init_array+0x44>)
 80045ee:	1b64      	subs	r4, r4, r5
 80045f0:	10a4      	asrs	r4, r4, #2
 80045f2:	42a6      	cmp	r6, r4
 80045f4:	d105      	bne.n	8004602 <__libc_init_array+0x2e>
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fc:	4798      	blx	r3
 80045fe:	3601      	adds	r6, #1
 8004600:	e7ee      	b.n	80045e0 <__libc_init_array+0xc>
 8004602:	f855 3b04 	ldr.w	r3, [r5], #4
 8004606:	4798      	blx	r3
 8004608:	3601      	adds	r6, #1
 800460a:	e7f2      	b.n	80045f2 <__libc_init_array+0x1e>
 800460c:	080057ec 	.word	0x080057ec
 8004610:	080057ec 	.word	0x080057ec
 8004614:	080057ec 	.word	0x080057ec
 8004618:	080057f0 	.word	0x080057f0

0800461c <memset>:
 800461c:	4603      	mov	r3, r0
 800461e:	4402      	add	r2, r0
 8004620:	4293      	cmp	r3, r2
 8004622:	d100      	bne.n	8004626 <memset+0xa>
 8004624:	4770      	bx	lr
 8004626:	f803 1b01 	strb.w	r1, [r3], #1
 800462a:	e7f9      	b.n	8004620 <memset+0x4>

0800462c <_init>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr

08004638 <_fini>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr
